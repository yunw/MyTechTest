4、指令：worker_connections
Syntax :	worker_connections number;
Default:	worker_connections 512;
Context:	events
该指令设置能被一个工作进程同时打开的连接数的最大值。
注意：这个数量包含了所有的连接（例如：连接到被代理的服务器），而不仅仅是来自客户端的连接。另外需要注意的是：
这个同时连接的实际数量不可能超过打开文件的最大数量，它由worker_rlimit_nofile配置。

3、指令：worker_processes
Syntax :	worker_processes number | auto;
Default:	worker_processes 1;
Context:	main
该指令定义工作进程的数量。
最佳值依赖许多事实，包括（但不限于）cpu cores数量，存储数据的硬盘驱动数量，以及加载模式。
如果不知道该设为多少，将它设为与cpu cores一致是比较好的开始。

2、指令：location
Syntax :	location [ = | ~ | ~* | ^~ ] uri { ... }
            location @name { ... }
Default:	—
Context:	server, location
该指令的配置依赖于请求URI。
该指令匹配标准化的URI，也就是将请求的“%XX”格式转换后的形式。
location指令可以通过前缀字符串或者正则表达式来定义。正则表达式由前缀“~*”（大小写不敏感匹配）或者“~”（大小写敏感匹配）标识符来指定。
为了找到一个请求的location匹配。nginx首先校验location定义中的前缀字符串（又称前缀location）。通过它们，拥有最长前缀匹配的location被选中并被记住。
然后按照配置文件中出现的顺序校验正则表达式，匹配上了一个之后，匹配工作结束，该匹配上的正则表达式对应的配置被采用。如果没有任何正则表达式匹配上，那么
前面记住的前缀location被采用。
如果最长匹配的前缀location有一个“^~”标识符，那么将不会校验正则表达式，而直接采用这个前缀location对应的配置。
使用“=”标识符可以定义一个精确的URI匹配。如果精确匹配被发现，就直接采用其对应的配置。
举例说明：
location = / {
    [ configuration A ]
}

location / {
    [ configuration B ]
}

location /documents/ {
    [ configuration C ]
}

location ^~ /images/ {
    [ configuration D ]
}

location ~* \.(gif|jpg|jpeg)$ {
    [ configuration E ]
}
                       “/”采用配置A：精确匹配。
             “/index.html”采用配置B：首先匹配上B（B可以匹配任意请求），然后去匹配E这个正则表达式，没有匹配上，所以最终采用B。
“/documents/document.html”采用配置C：首先匹配上B、C，但C是最长匹配，因此C被记住。然后去匹配E这个正则表达式，没有匹配上，所以最终采用C。
           “/images/1.gif”采用配置D：首先匹配上B、D，但D是最长匹配，因此D被记住，同时，因为D有“^~”标识符，所以不去匹配正则表达式而直接采用D。
        “/documents/1.jpg”采用配置E：首先匹配上B、C，C是最长匹配被记住。然后去匹配正则表达式E，也匹配上了，因此采用E。
        
特殊的地方：
如果一个location通过一个最后带斜线的前缀字符串定义，并且请求被下列指令中的一个处理： proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, or memcached_pass
那么就有一个特殊的操作被执行：一个与location相同的请求字符串，但是最后没有斜线，都会被服务器以301响应，重定向到带斜杠的location上去。
例如：
location /user/ {
    proxy_pass http://user.example.com;
}
请求“/user”会被永久重定向到“/user/”上去。如果这不是你想要的结果，那你必须明确定义不带斜杠的location，例如：
location /user/ {
    proxy_pass http://user.example.com;
}

location = /user {
    proxy_pass http://login.example.com;
}
这样，请求“/user”就不会被重定向到“/user”上去了。

1、指令：server_name
Syntax :	server_name name ...;
Default:	server_name "";
Context:	server
说明：该指令指明虚拟服务器（visual server）的名称。它的上下文为虚拟服务器，默认值为空。
举例：
server {
    server_name example.com www.example.com;
}
第一个名称成为主服务器名称。服务器名称可以包含星号（“*”），用来代替名称的最前或最后的部分。这样的名称被称为
通配符名称。
举例：
server {
    server_name example.com *.example.com www.example.*;
}
上述例子的前两个名称（example.com *.example.com）可以合并为：.example.com。这是一个特殊的通配符名称。
服务器名称也可以使用正则表达式，通过在名称的前面加上一个波浪符（“~”）
举例：
server {
    server_name www.example.com ~^www\d+\.example\.com$;
}
一个命名的正则表达式可在稍后作为变量使用：
举例：
server {
    server_name   ~^(www\.)?(?<domain>.+)$;

    location / {
        root   /sites/$domain;
    }
}
命名表达式采用如下语法：
?<name> 	Perl 5.10 compatible syntax, supported since PCRE-7.0
?'name' 	Perl 5.10 compatible syntax, supported since PCRE-7.0
?P<name>	Python compatible syntax, supported since PCRE-4.0
nginx使用Perl programming language (PCRE)正则表达式语法。

当通过名称来寻找虚拟服务器的时候，可能有多个名称被匹配到。那么，按如下的优先顺序匹配，第一个匹配到的就被采用：
1、精确名称
2、以星号开始的最长的通配符名称，如：“*.example.org”
3、以星号结束的最长的通配符名称，如：“mail.*”
4、第一个匹配到的正则表达式（按配置文件中出现的顺序进行匹配）

优化：
       精确名称、星号开始的通配符名称和星号结束的通配符名称被放在三个不同的哈希表中绑定到监听端口上。
首先从精确名称哈希表中查找，如果名称不存在，就到星号开始的通配符名称哈希表中查找；如果还是不存在，就到星号结束的
通配符名称中查找。
       注意：.example.org是一个特殊的通配符名称，因此它存储在通配符哈希表中而不是精确名称哈希表中。
       因此，如果可能的话，尽可能使用精确名称。例如，如果大多数请求的服务器名称是：example.org和www.example.org，下面
两种配置方式就有显著的性能差异：
server {
    listen       80;
    server_name  example.org  www.example.org  *.example.org;
    ...
}
server {
    listen       80;
    server_name  .example.org;
    ...
}
第一种配置的性能更高。

nginx如何处理请求：
nginx首先决定哪个服务器来处理请求。

A、Name-based virtual servers
server {
    listen      80;
    server_name example.org www.example.org;
    ...
}

server {
    listen      80;
    server_name example.net www.example.net;
    ...
}

server {
    listen      80;
    server_name example.com www.example.com;
    ...
}
在这个配置中，nginx只能通过请求的首部字段“Host”来决定请求将被路由到哪个服务器。如果名称一个也没有匹配到，或者请求
根本就没有“Host”首部，nginx将把请求路由到这个端口对应的默认服务器上。在上面的配置中，第一个服务器就是默认的（这是nginx
的默认行为）。默认服务器也可以用“default_server”参数显式的设置，例如：
server {
    listen      80 default_server;
    server_name example.net www.example.net;
    ...
}

B、Mixed name-based and IP-based virtual servers
server {
    listen      192.168.1.1:80;
    server_name example.org www.example.org;
    ...
}

server {
    listen      192.168.1.1:80;
    server_name example.net www.example.net;
    ...
}

server {
    listen      192.168.1.2:80;
    server_name example.com www.example.com;
    ...
}
上述配置首先匹配请求的IP地址和端口，然后匹配服务器名称，如果没有找到，就发送到默认服务器。例如：
当nginx收到来自192.168.1.1:80的请求www.example.com，首先匹配IP地址和端口。发现前两个server都匹配上了，接着
匹配服务器名称，都没有匹配上，那么发送到第一个服务器上。
       默认服务器“default_server”参数作为listen的一个属性，它可以为不同的IP地址和端口配置不同的“default_server”参数
例如：
server {
    listen      192.168.1.1:80;
    server_name example.org www.example.org;
    ...
}

server {
    listen      192.168.1.1:80 default_server;
    server_name example.net www.example.net;
    ...
}

server {
    listen      192.168.1.2:80 default_server;
    server_name example.com www.example.com;
    ...
}

现在来看一个简单的php网站的配置，看nginx如何选择location来处理请求：
server {
    listen      80;
    server_name example.org www.example.org;
    root        /data/www;

    location / {
        index   index.html index.php;
    }

    location ~* \.(gif|jpg|png)$ {
        expires 30d;
    }

    location ~ \.php$ {
        fastcgi_pass  localhost:9000;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include       fastcgi_params;
    }
}
nginx在匹配的时候是不匹配请求参数（query string）的。
现在看看上述配置是如何处理请求的：
A：“/logo.gif”首先被前缀location“/”匹配，然后被正则表达式“\.(gif|jpg|png)$”匹配，后者被采用，使用指令“root /data/www”，请求被
映射到文件：/data/www/logo.gif，并且将该文件发送到客户端。
B：“/index.php”也是首先被前缀location“/”匹配上然后被正则表达式“\.(php)$”匹配上。因此，后者的配置被采用。请求被转发到监听localhost:9000的fastcgi服务器上。
fastcgi_param指令将fastcgi参数：SCRIPT_FILENAME设置为：“/data/www/index.php”，随即fastcgi服务器执行这个文件。变量$document_root等于root指令的值。
变量$fastcgi_script_name等于请求URI，例如：“/index.php”.
C：“/aoubt.html”只被前缀location“/”匹配。因此该配置被采用。使用指令“root /data/www”，该请求被映射到文件：/data/www/about.html，并且该文件被送到客户端。
D：“/”比较复杂。它只被前缀location“/”匹配。因此该配置被采用。然后index指令校验它的index文件是否存在（先用“root /data/www”转换）。如果文件“/data/www/index.html”
不存在，而“/data/www/index.php”存在，那么该指令做了一个内部重定向到“/index.php”，然后nginx重新匹配该请求，就像它是从客户端发送过来的一样。如上配置文件所述，
重定向的请求最终被fastcgi服务器处理。