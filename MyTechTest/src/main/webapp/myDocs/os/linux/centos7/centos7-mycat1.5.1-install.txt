1、开启防火墙：
firewall-cmd --zone=public --add-port=8066/tcp --permanent
firewall-cmd --zone=public --add-port=9066/tcp --permanent
firewall-cmd --reload
firewall-cmd --permanent --query-port=8066/tcp
firewall-cmd --permanent --query-port=9066/tcp
 
1、下载解压
wget https://github.com/MyCATApache/Mycat-download/blob/master/1.5-RELEASE/Mycat-server-1.5.1-RELEASE-20160720200038-linux.tar.gz
wget https://raw.githubusercontent.com/MyCATApache/Mycat-download/master/1.5-RELEASE/Mycat-server-1.5.1-RELEASE-20160720200038-linux.tar.gz

tar zxf Mycat-server-1.5.1-RELEASE-20160720200038-linux.tar.gz -C /usr/local
useradd mycat
chown -R mycat.mycat /usr/local/mycat
修改mycat用户密码：
[root@localhost ~]# passwd mycat
new password: mycat
retype new password: mycat

vi /etc/profile
export MYCAT_HOME=/usr/local/mycat
export PATH=$MYCAT_HOME/bin:$PATH
source /etc/profile

注：mysql需要忽略大小写，否则mycat可能会提示找不到表。可以在/etc/my.cnf下配置：lower_case_table_names=1 

mycat start|stop|restart

[root@localhost ~]# mysql -uroot -proot -P9066 -h 127.0.0.1 -S /tmp/mysql3306.sock
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.5.8-mycat-1.5.1-RELEASE-20160720200038 MyCat Server (monitor)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show @@connection;
+------------+------+-----------+------+------------+------+--------+---------+--------+---------+---------------+-------------+------------+---------+------------+
| PROCESSOR  | ID   | HOST      | PORT | LOCAL_PORT | USER | SCHEMA | CHARSET | NET_IN | NET_OUT | ALIVE_TIME(S) | RECV_BUFFER | SEND_QUEUE | txlevel | autocommit |
+------------+------+-----------+------+------------+------+--------+---------+--------+---------+---------------+-------------+------------+---------+------------+
| Processor1 |    2 | 127.0.0.1 | 9066 |      55541 | root | NULL   | utf8:33 |    121 |     194 |             9 |        4096 |          0 |         |            |
+------------+------+-----------+------+------------+------+--------+---------+--------+---------+---------------+-------------+------------+---------+------------+
1 row in set (0.01 sec)



server.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mycat:server SYSTEM "server.dtd">
<mycat:server xmlns:mycat="http://org.opencloudb/">
    <system>
    <property name="defaultSqlParser">druidparser</property>
    </system>
    <user name="root">
        <property name="password">root</property>
        <property name="schemas">mysql</property>
    </user>
</mycat:server>

schema.xml
<?xml version="1.0"?>
<!DOCTYPE mycat:schema SYSTEM "schema.dtd">
<mycat:schema xmlns:mycat="http://org.opencloudb/" >

    <schema name="mysql" checkSQLschema="false" sqlMaxLimit="100">
        <!-- auto sharding by id (long) -->
<table name="company" primaryKey="ID" dataNode="dn2,dn1" rule="mod-long"/>
        <!-- global table is auto cloned to all defined data nodes ,so can join 
            with any table whose sharding node is in the same data node -->
        <table name="goods" primaryKey="ID" type="global" dataNode="dn1,dn2" />
        <!-- random sharding using mod sharind rule -->
        <table name="hotnews" primaryKey="ID" dataNode="dn1,dn2"
            rule="mod-long" />
        <table name="employee" primaryKey="ID" dataNode="dn1,dn2"
            rule="sharding-by-intfile" />
        <table name="customer" primaryKey="ID" dataNode="dn1,dn2"
            rule="sharding-by-intfile">
            <childTable name="orders" primaryKey="ID" joinKey="customer_id"
                parentKey="id">
                <childTable name="order_items" joinKey="order_id"
                    parentKey="id" />
            </childTable>
            <childTable name="customer_addr" primaryKey="ID" joinKey="customer_id"
                parentKey="id" />
        </table>
    </schema>
    <dataNode name="dn1" dataHost="localhost1" database="db1" />
    <dataNode name="dn2" dataHost="localhost1" database="db2" />
    <dataNode name="dn3" dataHost="localhost1" database="db3" />
    <dataHost name="localhost1" maxCon="1000" minCon="10" balance="0"
        writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
        <heartbeat>select user()</heartbeat>
        <!-- can have multi write hosts -->
        <writeHost host="hostM1" url="10.202.4.39:3306" user="root"
            password="sf123456">
        </writeHost>
    </dataHost>
</mycat:schema>
说明：
一、schema标签：
schema标签用于定义 MyCat实例中的逻辑库，MyCat有多个逻辑库，每个逻辑库都有自己的相关配置。可以使用schema标签来划分这些不同的逻辑库。
如果没有配置schema标签，所有的表配置，会属于同一个默认的逻辑库。逻辑库的概念和mysql数据库中database的概念相同。
属性：
1、name：逻辑库名称
2、dataNode：绑定逻辑库到某个具体的database上。
3、checkSQLschema：设置为"true"的时候，会把schema字符去掉。例如：
**select * from TESTDB.travelrecord;**
会被修改为：
**select * from travelrecord;**
4、sqlMaxLimit：查询记录条数最大值的默认值。例如：该值被设置为100。那么：
**select * from TESTDB.travelrecord;**
与：
**select * from TESTDB.travelrecord limit 100;**
的效果相同。

二、table标签：
定义了mycat中的逻辑表，所有需要拆分的表都需要在这个标签中定义。
1、name：逻辑表的表名。与数据库中执行create table命令制定的名字一样。同一个schema中的表名必须唯一。
2、dataNode：定义该逻辑表所属的dataNode。该属性的值需要和dataNode标签的name属性的值相对应。如果dataNode的值太多，可用下述方式减少配置量：
<table name="travelrecord" dataNode="multipleDn$0-99,multipleDn2$100-199" rule="auto-shardinglong"></table>
<dataNode name="multipleDn" dataHost="localhost1" database="db$0-99"></dataNode>
<dataNode name="multipleDn2" dataHost="localhost1" database="db$100-199"></dataNode>
这里需要注意的是database属性指定的真是database name需要在后面加"$"，例如：上面的例子中，我们需要在真实的mysql上建立名称为db0到db99的database。
3、rule：该属性指定逻辑表要使用的规则名字，规则名字在rule.xml中定义，必须与tablerule标签中的name属性的值意义对应。
4、ruleRequired：用于指定该表是否绑定分片规则，如果为"true"，但没有配置具体的rule，程序会报错。
5、primaryKey：该逻辑表对应真实表的主键。例如：分片规则是使用非主键分片的。那么使用主键查询的时候就会发送查询语句到所有配置的dn上。如果该属性配置了主键，那么mycat会
缓存主键与dn的关系。那么再次使用非主键进行查询的时候就不会进行广播式的查询，会发送语句到具体的dn，但缓存没有命中，还是会广播。
6、type：定义逻辑表的类型，目前只有全局表和普通表两种类型。
全局表：global
普通表：不指定该属性值为global的所有表。
7、autoIncrement：
mysql对非自增长主键，使用last_insert_id()是不会返回结果的，只会返回0。
mycat提供了自增长主键功能，但是如果mysql上的表的主键没有定义auto_increment，那么mycat调用last_insert_id()也是不会返回结果的。
该属性默认为false，也就是禁用。
8、subTables：
9、needAddLimit：指定表是否需要自动在每个语句后加上limit限制。默认为true。

三、childTable标签
用于定义er分片的子表。通过标签上的属性与父表进行关联。
1、name：子表表名
2、joinKey：插入子表的时候会使用这个列的值查找父表存储的数据节点。
3、parentKey：该属性指定的值一般为与父表建立关联关系的列名。程序首先获取jonkey的值，再通过该属性指定的列名产生查询语句，通过执行该语句得到父表存储在哪个分片上，从而
确定子表的存储位置。
4、primaryKey：与table标签中的primaryKey相同
5、needAddLimit：与table标签中的needAddLimit相同

四、dataNode标签
定义了mycat中的数据节点，也就是通常所说的数据分片。一个dataNode就是一个独立的数据分片。
1、name：定义数据节点的名字。这个名字需要是唯一的，我们需要在table标签上使用这个名字，来建立表与分片的对应关系。
2、dataHost：该属性定义该分片属于哪个数据库实例。属性值是引用dataHost标签的name属性。
3、database：定义该分片属于哪个具体数据库实例上的具体库。因为这里用两个维度来定义分片：实例+具体库。因为每个库上建立的表和表结构是一样的，所以这样做可以轻松地对标进行
水平拆分。

五、dataHost标签：
定义了具体的数据库实例、读写分离配置和心跳语句。
1、name：唯一标识dataHost标签。
2、maxCon：指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数。
3、minCon：制定每个读写实例连接池的最小连接。
4、balance：负载均衡类型，目前有三种：
balance="0"，不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。
balance="1"，全部的readHost与stand by writeHost都参与select语句的负载均衡。
balance="2"，所有的读操作都随机的在writeHost、readHost上分发。
balance="3"，所有读请求随机的分发到writeHost对应得readHost上执行。writeHost不分担压力。
4、writeType：
写类型。两种取值：
writeType="0"。所有写操作发送到配置的第一个writeHost，第一个宕机了切换到还生存的第二个writehost，重启后以切换后的为准，切换记录在dnindex.properties文件中。
writeType="1"。所有写操作随机发送到配置的writeHost，1.5以后废弃。
5、switchType：
主从切换：
switchType="-1"，不自动切换。
switchType="1"，默认值，自动切换。
switchType="2"，基于mysql主从同步的状态决定是否切换。心跳语句为：show slave status
switchType="3"，基于mysql galary cluster的切换机制。心跳语句为：show status like 'wsrep%'。
6、dbType：后端连接的数据库类型。
7、dbDriver：连接后端数据库使用的driver，目前可选的值有：native和jdbc。使用native的话，因为这个执行的是二进制的mysql协议，所以可以使用mysql和maridb。
其他数据库必须使用jdbc。
8、tempReadHostAvailable

六、heartbeat标签：
用于指定和后端数据库进行心跳检查的语句。例如mysql可以使用select user()。oracle可以使用select 1 from dual等。

七、writeHost、readHost标签：
指定后端数据库的相关配置给mycat。
















