BSD(Berkeley Software Distribution):伯克利软件发布
NFS(Network File System)：网络文件系统
CDN(Content Delivery Network):内容分发网络
MMU(memory management unit)：内存管理单元，它负责虚拟地址到物理地址的映射，并提供硬件机制的内存条件检查。

transparent huge page（THP）透明巨页：
内存管理的最小单元叫page。一个page的大小是4096bytes。
简单来说， Huge Pages就是大小为2M到1GB的内存page，主要用于管理数千兆的内存，比如1GB的page对于1TB的内存来说是相对比较合适的。
THP（Transparent Huge Pages）是一个使管理Huge Pages自动化的抽象层。
目前需要注意的是，由于实现方式问题，THP会造成内存锁影响性能，尤其是在程序不是专门为大内内存页开发的时候，简单介绍如下：
操作系统后台有一个叫做khugepaged的进程，它会一直扫描所有进程占用的内存，在可能的情况下会把4kpage交换为Huge Pages，在这个过程中，对于操作的内存的各种分配活动都需要各种内存锁，直接影响程序的内存访问性能，
并且，这个过程对于应用是透明的，在应用层面不可控制,对于专门为4k page优化的程序来说，可能会造成随机的性能下降现象。
centos7默认使用thp：
实时修改配置的方法：
[root@centos71 transparent_hugepage]# cat  /sys/kernel/mm/transparent_hugepage/enabled
[always] madvise never
[root@centos71 transparent_hugepage]# echo never > /sys/kernel/mm/transparent_hugepage/enabled
[root@centos71 transparent_hugepage]# cat  /sys/kernel/mm/transparent_hugepage/enabled
always madvise [never]

内核参数：somaxconn 
参考：http://blog.csdn.net/niitlcj/article/details/9168843
    http://www.360doc.com/content/14/0606/16/3300331_384326124.shtml
    http://blog.csdn.net/linquidx/article/details/5914640
定义了系统中每一个端口最大的监听队列的长度。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。
echo 2048 >   /proc/sys/net/core/somaxconn    #但是这样系统重启后保存不了
在/etc/sysctl.conf中添加如下
net.core.somaxconn = 2048
然后在终端中执行
sysctl -p

hosts文件的位置：
/etc/hosts

/etc/hosts.allow和/etc/hosts.deny
修改/etc/hosts.allow文件
#
# hosts.allow This file describes the names of the hosts which are
# allowed to use the local INET services, as decided
# by the ‘/usr/sbin/tcpd’ server.
#
sshd:210.13.218.*:allow
sshd:222.77.15.*:allow
以上写法表示允许210和222两个ip段连接sshd服务（这必然需要hosts.deny这个文件配合使用），当然:allow完全可以省略的。
/etc/hosts.deny文件，此文件是拒绝服务列表，文件内容如下：
#
# hosts.deny This file describes the names of the hosts which are
# *not* allowed to use the local INET services, as decided
# by the ‘/usr/sbin/tcpd’ server.
#
# The portmap line is redundant, but it is left to remind you that
# the new secure portmap uses hosts.deny and hosts.allow. In particular
# you should know that NFS uses portmap!
sshd:all:deny
注意看：sshd:all:deny表示拒绝了所有sshd远程连接。:deny可以省略。
所以：当hosts.allow和 host.deny相冲突时，以hosts.allow设置为准。
linux 系统会先检查/etc/hosts.deny规则，再检查/etc/hosts.allow规则，如果有冲突 按/etc/hosts.allow规则处理

192.168.1.1/32表示ip地址为192.168.1.1子网掩码为255.255.255.255，整个局域网可以有1个ip地址可以用，这个局域网就一个ip地址，也就等于不存在任何局域网了。

32位linux：http://www.cnblogs.com/xkfz007/articles/2715192.html
1）线性地址空间：是指Linux系统中从0x00000000到0xFFFFFFFF整个4GB虚拟存储空间。
2）内核空间：内核空间表示运行在处理器最高级别的超级用户模式（supervisor mode）下的代码或数据，
       内核空间占用从0xC0000000到0xFFFFFFFF的1GB线性地址空间，内核线性地址空间由所有进程共享，但只有运行在内核态的进程才能访问，
       用户进程可以通过系统调用切换到内核态访问内核空间，进程运行在内核态时所产生的地址都属于内核空间。
3）用户空间：用户空间占用从0x00000000到0xBFFFFFFF共3GB的线性地址空间，每个进程都有一个独立的3GB用户空间，
       所以用户空间由每个进程独有，但是内核线程没有用户空间，因为它不产生用户空间地址。
       另外子进程共享（继承）父进程的用户空间只是使用与父进程相同的用户线性地址到物理内存地址的映射关系，
       而不是共享父进程用户空间。运行在用户态和内核态的进程都可以访问用户空间。
4）内核逻辑地址空间：是指从PAGE_OFFSET(3G)到high_memory(物理内存的大小，最大896)之间的线性地址空间，是系统物理内存映射区，
       它映射了全部或部分（如果系统包含高端内存）物理内存。内核逻辑地址空间与图18-4中的系统RAM内存物理地址空间是一一对应的（包括内存孔洞也是一一对应的），
       内核逻辑地址空间中的地址与RAM内存物理地址空间中对应的地址只差一个固定偏移量（3G），如果RAM内存物理地址空间从0x00000000地址编址，那么这个偏移量就是PAGE_OFFSET。
5）低端内存：内核逻辑地址空间所映射物理内存就是低端内存(实际物理内存的大小，但是小于896)，低端内存在Linux线性地址空间中始终有永久的一一对应的内核逻辑地址，
       系统初始化过程中将低端内存永久映射到了内核逻辑地址空间，为低端内存建立了虚拟映射页表。
       低端内存内物理内存的物理地址与线性地址之间的转换可以通过__pa(x)和__va(x)两个宏来进行，
   #define __pa(x) ((unsigned long)(x)-PAGE_OFFSET) __pa(x)将内核逻辑地址空间的地址x转换成对应的物理地址，
       相当于__virt_to_phys((unsigned long)(x))，__va(x)则相反，把低端物理内存空间的地址转换成对应的内核逻辑地址，
       相当于((void *)__phys_to_virt((unsigned long)(x)))。
6）高端内存：低端内存地址之上的物理内存是高端内存（物理内存896之上），高端内存在Linux线性地址空间中没有固定的一一对应的内核逻辑地址，
      系统初始化过程中不会为这些内存建立映射页表将其固定映射到Linux线性地址空间，而是需要使用高端内存的时候才为分配的高端物理内存建立映射页表，
       使其能够被内核使用，否则不能被使用。高端内存的物理地址于现行地址之间的转换不能使用上面的__pa(x)和__va(x)宏。
7）高端内存概念的由来：如上所述，Linux将4GB的线性地址空间划分成两部分，从0x00000000到0xBFFFFFFF共3GB空间作为用户空间由用户进程独占，
       这部分线性地址空间并没有固定映射到物理内存空间上；从0xC0000000到0xFFFFFFFF的第4GB线性地址空间作为内核空间，
       在嵌入式系统中，这部分线性地址空间除了映射物理内存空间之外还要映射处理器内部外设寄存器空间等I/O空间。
  0xC0000000~high_memory之间的内核逻辑地址空间专用来固定映射系统中的物理内存，也就是说0xC0000000~high_memory之间空间大小与系统的物理内存空间大小
      是相同的（当然在配置了CONFIG_DISCONTIGMEMD选项的非连续内存系统中，内核逻辑地址空间和物理内存空间一样可能存在内存孔洞），
      如果系统中的物理内存容量远小于1GB，那么内核现行地址空间中内核逻辑地址空间之上的high_memory~0xFFFFFFFF之间还有足够的空间来固定映射一些I/O空间。
      可是，如果系统中的物理内存容量（包括内存孔洞）大于1GB，那么就没有足够的内核线性地址空间来固定映射系统全部物理内存以及一些I/O空间了，为了解决这个问题，
      在x86处理器平台设置了一个经验值：896MB，就是说，如果系统中的物理内存（包括内存孔洞）大于896MB，
      那么将前896MB物理内存固定映射到内核逻辑地址空间0xC0000000~0xC0000000+896MB（=high_memory）上，
      而896MB之后的物理内存则不建立到内核线性地址空间的固定映射，这部分内存就叫高端物理内存。此时内核线性地址空间high_memory~0xFFFFFFFF之间的128MB空间就称为高端内存线性地址空间，
      用来映射高端物理内存和I/O空间。896MB是x86处理器平台的经验值，留了128MB线性地址空间来映射高端内存以及I/O地址空间，
      我们在嵌入式系统中可以根据具体情况修改这个阈值，比如，MIPS中将这个值设置为0x20000000B（512MB），那么只有当系统中的物理内存空间容量大于0x20000000B时，
      内核才需要配置CONFIG_HIGHMEM选项，使能内核对高端内存的分配和映射功能。什么情况需要划分出高端物理内存以及高端物理内存阈值的设置原则见上面的内存页区（zone）概念说明。
8）高端线性地址空间：从high_memory到0xFFFFFFFF之间的线性地址空间属于高端线性地址空间，
       其中VMALLOC_START~VMALLOC_END之间线性地址被vmalloc()函数用来分配物理上不连续但线性地址空间连续的高端物理内存，
       或者被vmap()函数用来映射高端或低端物理内存，或者由ioremap()函数来重新映射I/O物理空间。
  PKMAP_BASE开始的LAST_PKMAP（一般等于1024）页线性地址空间被kmap()函数用来永久映射高端物理内存。
  FIXADDR_START开始的KM_TYPE_NR*NR_CPUS页线性地址空间被kmap_atomic()函数用来临时映射高端物理内存，
        其他未用高端线性地址空间可以用来在系统初始化期间永久映射I/O地址空间。

内核空间、用户空间：
操作系统和驱动程序等内核模块运行在内核空间，应用程序运行在用户空间。

在/proc目录下有正在活动的进程id对应的目录：/proc/pid
例如：/proc/234 说明有一进程的id号为：234，这个目录里面存放了这个进程的信息

给防火墙开端口：
iptables -I INPUT -p tcp --dport 6379 -j ACCEPT

shell编程：
一、位置参数：
$0：程序名称
$1--$n：传递给程序的参数

二、内部参数：
$0：必需的
$0--$n：非必需的
$#：传递给程序的总的参数数目
$?：上一个代码或程序在shell中退出的情况。如果正常退出则为0，否则为非0值。
$*：传递给程序的所有参数组成的字符串。

查看linux版本：
[root@SSSVL0304 Downloads]# cat /proc/version
Linux version 2.6.32-504.el6.x86_64 (mockbuild@c6b9.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) ) #1 SMP Wed Oct 15 04:27:16 UTC 2014
[root@SSSVL0304 Downloads]# cat /etc/issue
CentOS release 6.6 (Final)
Kernel \r on an \m
[root@SSSVL0304 kernels]# uname -r
2.6.32-504.el6.x86_64

ssh登录远程机器：
ssh username@ipaddr
然后需要输入密码，即可登录。
例如：
[root@SSAVL2438 wechatroot]# ssh root@10.91.230.232
root@10.91.230.232's password:    #在此处输入密码：Root1q2w
Last login: Mon Jun 1 09:08:19 2015 from 10.91.230.234
[root@SSAVL2436 ~]#

将远程文件夹拷贝到本地：
#将远程username@remoteIpAddr:/remotedir0/remotedirdir1文件夹拷贝到本地文件夹/localdir0/下。
scp -r username@remoteIpAddr:/remotedir0/remotedirdir1 /localdir0/ 
例如：scp -r root@10.91.230.232:/wechatroot/WechatManageServer /wechatroot #拷贝到本地文件夹/wechatroot下

将远程文件拷贝到本地：
scp -r username@remoteIpAddr:/remotedir/remotefilename /localdir/

linux运行级别：
运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动
运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆
运行级别2：多用户状态(没有NFS)
运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式
运行级别4：系统未使用，保留
运行级别5：X11控制台，登陆后进入图形GUI模式
运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动

运行级别的原理：
1。在目录/etc/rc.d/init.d下有许多服务器脚本程序，一般称为服务(service)
2。在/etc/rc.d下有7个名为rcN.d的目录，对应系统的7个运行级别
3。rcN.d目录下都是一些符号链接文件，这些链接文件都指向init.d目录下的service脚本文件，命名规则为K+nn+服务名或S+nn+服务名，其中nn为两位数字。
4。系统会根据指定的运行级别进入对应的rcN.d目录，并按照文件名顺序检索目录下的链接文件
     对于以K开头的文件，系统将终止对应的服务
     对于以S开头的文件，系统将启动对应的服务
5。查看运行级别用：runlevel
6。进入其它运行级别用：init N
7。另外init0为关机，init 6为重启系统

定时任务crontab:
首先查看crond是否启动：service crond status

命令形式：
c r o n t a b命令的一般形式为：
Crontab [-u user] -e -l -r
其中：
-u 用户名。
-e 编辑c r o n t a b文件。
-l 列出c r o n t a b文件中的内容。
-r 删除c r o n t a b文件。
如果使用自己的名字登录，就不用使用- u选项，因为在执行c r o n t a b命令时，该命令能够知道当前的用户

为了能够在特定的时间运行作业，需要了解c r o n t a b文件每个条目中各个域的意义和格式。
下面就是这些域：
第1列分钟1～59
第2列小时1～23（0表示子夜）
第3列日1～31
第4列月1～12
第5列星期0～6（0表示星期天）
第6列要运行的命令
例如：
30 * * * * /usr/local/test.sh #每30分钟执行一次脚本



bash中 2>&1 & 的解释
1、首先，bash中0，1，2三个数字分别代表STDIN_FILENO、STDOUT_FILENO、STDERR_FILENO，即标准输入（一般是键盘），标准输出（一般是显示屏，准确的说是用户终端控制台），标准错误（出错信息输出）。
2、输入输出可以重定向，所谓重定向输入就是在命令中指定具体的输入来源，譬如 cat < test.c 将test.c重定向为cat命令的输入源。输出重定向是指定具体的输出目标以替换默认的标准输出，譬如ls > 1.txt将ls的结果从标准输出重定向为1.txt文本。有时候会看到如 ls >> 1.txt这类的写法，> 和 >> 的区别在于：> 用于新建而>>用于追加。即ls > 1.txt会新建一个1.txt文件并且将ls的内容输出到新建的1.txt中，而ls >> 1.txt则用在1.txt已经存在，而我们只是想将ls的内容追加到1.txt文本中的时候。
3、默认输入只有一个（0，STDIN_FILENO），而默认输出有两个（标准输出1 STDOUT_FILENO，标准错误2 STDERR_FILENO）。因此默认情况下，shell输出的错误信息会被输出到2，而普通输出信息会输出到1。但是某些情况下，我们希望在一个终端下看到所有的信息（包括标准输出信息和错误信息），要怎么办呢？
       对了，你可以使用我们上面讲到的输出重定向。思路有了，怎么写呢？ 非常直观的想法就是2>1（将2重定向到1嘛），行不行呢？试一试就知道了。我们进行以下测试步骤：
1）mkdir test && cd test                ; 创建test文件夹并进入test目录
2）touch a.txt b.c c                          ; 创建a.txt b.c c 三个文件
3）ls > 1                                           ; 按我们的猜测，这句应该是将ls的结果重定向到标准输出，因此效果和直接ls应该一样。但是实际这句执行后，标准输出中并没有任何信息。
4）ls                                                  ; 执行3之后再次ls，则会看到test文件夹中多了一个文件1
5）cat 1                                            ; 查看文件1的内容，实际结果为：1 a.txt b.c c     可见步骤3中 ls > 1并不是将ls的结果重定向为标准输出，而是将结果重定向到了一个文件1中。即1在此处不被解释为STDOUT_FILENO，而是文件1。
4、到了此时，你应该也能猜到2>&1的用意了。不错，2>&1就是用来将标准错误2重定向到标准输出1中的。此处1前面的&就是为了让bash将1解释成标准输出而不是文件1。至于最后一个&，则是让bash在后台执行。

网络：
1、eth0、eth1：
eth0代表网卡一、eth1代表网卡二
2、lo代表127.0.0.1即localhost
3、网关：
网关(Gateway)又称网间连接器、协议转换器。网关在网络层以上实现网络互连，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互连。
网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；
网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，
即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。
而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机。
4、子网 掩码：
子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。  
子网掩码的设定必须遵循一定的规则。与IP地址相同，子网掩码的长度也是32位，左边是网络位，用二进制数字“1”表示；右边是主机位，用二进制数字“0”表示。
只有通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作。
5、ip地址：
互联网上联接了无数的服务和电脑，但它们并不是处于杂乱无章的无序状态，而是每一个主机都有惟一的地址，作为该主机在Internet上的唯一标志。我们称为IP地址（Internet Protocol Address）。
它是一串4组由圆点分割的数字组成的，其中每一组数字都在0－256之间，如：0－255．0－255．0－255．0－255．0－255；如，202．202．96．33就是一个主机服务器的IP地址。

route命令：
用于显示和操作ip路由表。

/dev/null：
把/dev/null 看作"黑 洞" . 它非常等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到. 然而, /dev/null 对命令行和脚本都非常的有 用。
A、禁止标准输出：
cat $filename >/dev/null # 文件内容丢失，而不会输出到标准输出
B、禁止标准错误：
rm $badname 2>/dev/null # 这样错误信息[标准错误]就被丢到太平洋去了

/dev/zero：
像/dev/null 一样, /dev /zero也是一个伪文件 , 但它实际上产生连续不断的null的流（二进制的零流，而不是ASCII型的）. 
写入它的输出会丢失不见, 而从/dev/zero 读出一连串的null也比较困难, 虽然这也能通过od 或 一个十六进制编辑器来做到. 
/dev/zero 主要的用处是用来创建一个指定长度用于初始化的空文件，就像临时交换文件.
关于 /dev/zero 的另一个应用是为特定的目的而用零去填充一个指定大小的文件, 如挂载一个文件系统到环回设备 （loopback device）
或"安全地" 删除一个文件
最后值得一提的是, ELF二进制文件利用了/dev/zero .

Linux启动过程详解：
启动第一步－－加载BIOS
        当你打开计算机电源，计算机会首先加载BIOS信息，BIOS信息是如此的重要，以至于计算机必须在最开始就找到它。这是因为BIOS中包含了CPU的相关信息、设备启动顺序信息、硬盘信息、内存信息、
        时钟信息、PnP特性等等。在此之后，计算机心里就有谱了，知道应该去读取哪个硬件设备了。
启动第二步－－读取MBR
       众所周知，硬盘上第0磁道第一个扇区被称为MBR，也就是Master Boot Record，即主引导记录，它的大小是512字节，别看地方不大，可里面却存放了预启动信息、分区表信息。
       系统找到BIOS所指定的硬盘的MBR后，就会将其复制到0x7c00地址所在的物理内存中。其实被复制到物理内存的内容就是Boot Loader，而具体到你的电脑，那就是lilo或者grub了。
启动第三步－－Boot Loader / Grup
   Boot Loader 就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核做好一切准备。
   Boot Loader有若干种，其中Grub、Lilo和spfdisk是常见的Loader。
       我们以Grub为例来讲解吧，毕竟用lilo和spfdisk的人并不多。
       系统读取内存中的grub配置信息（一般为menu.lst或grub.lst），并依照此配置信息来启动不同的操作系统。
启动第四步－－加载内核
       根据grub设定的内核映像所在路径，系统读取内存映像，并进行解压缩操作。此时，屏幕一般会输出“Uncompressing Linux”的提示。当解压缩内核完成后，
       屏幕输出“OK, booting the kernel”。
       系统将解压后的内核放置在内存之中，并调用start_kernel()函数来启动一系列的初始化函数并初始化各种设备，完成Linux核心环境的建立。至此，Linux内核已经建立起来了，
       基于Linux的程序应该可以正常运行了。
启动第五步－－用户层init依据inittab文件来设定运行等级
       内核被加载后，第一个运行的程序便是/sbin/init，该文件会读取/etc/inittab文件，并依据此文件来进行初始化工作。
       其实/etc/inittab文件最主要的作用就是设定Linux的运行等级，其设定形式是“：id:5:initdefault:”，这就表明Linux需要运行在等级5上。Linux的运行等级设定如下：
  0：关机
  1：单用户模式
  2：无网络支持的多用户模式
  3：有网络支持的多用户模式
  4：保留，未使用
  5：有网络支持有X-Window支持的多用户模式
  6：重新引导系统，即重启
       关于/etc/inittab文件的学问，其实还有很多。
启动第六步－－init进程执行rc.sysinit
       在设定了运行等级后，Linux系统执行的第一个用户层文件就是/etc/rc.d/rc.sysinit脚本程序，它做的工作非常多，包括设定PATH、设定网络配置（/etc/sysconfig/network）、
       启动swap分区、设定/proc等等。如果你有兴趣，可以到/etc/rc.d中查看一下rc.sysinit文件，里面的脚本够你看几天的。
启动第七步－－启动内核模块
       具体是依据/etc/modules.conf文件或/etc/modules.d目录下的文件来装载内核模块。
启动第八步－－执行不同运行级别的脚本程序（/etc/rc.d/rc $RUNLEVEL    # $RUNLEVEL为缺省的运行模式 ）
       根据运行级别的不同，系统会运行rc0.d到rc6.d中的相应的脚本程序，来完成相应的初始化工作和启动相应的服务。
启动第九步－－执行/etc/rc.d/rc.local
       你如果打开了此文件，里面有一句话，读过之后，你就会对此命令的作用一目了然：
   # This script will be executed *after* all the other init scripts.
   # You can put your own initialization stuff in here if you don’t
   # want to do the full Sys V style init stuff.
   rc.local就是在一切初始化工作后，Linux留给用户进行个性化的地方。你可以把你想设置和启动的东西放到这里。
启动第十步－－执行/bin/login程序，进入登录状态
       此时，系统已经进入到了等待用户输入username和password的时候了，你已经可以用自己的帐号登入系统了。
       