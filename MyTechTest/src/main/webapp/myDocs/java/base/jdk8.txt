三大虚拟机：hotspot jrockit ibm j9 
hotspot:
元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制

函数式接口：
是指只包含一个抽象方法（Single Abstract Method）的接口。每一个该类型的lambda表达式都会被匹配到这个抽象方法。因为 默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。
我们可以将lambda表达式当作任意只包含一个抽象方法的接口类型，确保你的接口一定达到这个要求，
你只需要给你的接口添加 @FunctionalInterface 注解，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的。
函数式接口其实本质上还是一个接口，但是它是一种特殊的接口：SAM类型的接口（Single Abstract Method）。定义了这种类型的接口，使得以其为参数的方法，
可以在调用时，使用一个lambda表达式作为参数。从另一个方面说，一旦我们调用某方法，可以传入lambda表达式作为参数，则这个方法的参数类型，必定是一个函数式的接口，
这个类型必定会使用@FunctionalInterface进行修饰。

从SAM原则上讲，这个接口中，只能有一个函数需要被实现，但是也可以有如下例外:
1. 默认方法与静态方法并不影响函数式接口的契约，可以任意使用，即
函数式接口中可以有静态方法，一个或者多个静态方法不会影响SAM接口成为函数式接口，并且静态方法可以提供方法实现
可以由 default 修饰的默认方法方法，这个关键字是Java8中新增的，为的目的就是使得某一些接口，原则上只有一个方法被实现，但是由于历史原因，
不得不加入一些方法来兼容整个JDK中的API，所以就需要使用default关键字来定义这样的方法
2. 可以有 Object 中覆盖的方法，也就是 equals，toString，hashcode等方法


使用函数式代码的好处：
    减少了可变量(Immutable Variable)的声明
    能够更好的利用并行(Parallelism)
    代码更加简洁和可读

lamda表达式：
语法格式：(参数) -> {方法体}
说明： 1、圆括号：圆括号中为参数列表，参数之间用逗号隔开；参数可以写类型，也可以省略，如果只有一个参数，圆括号可以省略。没有参数，圆括号不能省略。
     2、方法体：方法有返回值时，如果只有一条语句可以省略return关键字。如果方法体只有一条语句可以省略{}。
lamda表达式定义了一个匿名函数的调用。    


Lambda 允许我们定义匿名方法(即那个 Lambda 表达式，或叫闭包)，作为一个功能性接口的实例。如果你不想把一个 Lambda 表达式写得过大，那么你可以把表达式的内容分离出来写在一个方法中，
然后在放置 Lambda 表达式的位置上填上对那个方法的引用。
方法引用也应看作是一个 Lambda 表达式，所以它也需要一个明确的目标类型充当功能性接口的实例。简单说就是被引用的方法要与功能接口的 SAM(Single Abstract Method) 参数、
返回类型相匹配。方法引用的引入避免了 Lambda 写复杂了可读性的问题，也使得逻辑更清晰。
为了应对方法引用这一概念， JDK8 又重新借用了 C++ 的那个 “::” 域操作符，全称为作用域解析操作符。

http://www.cnblogs.com/tina-smile/p/5756074.html
方法引用：
它通过类名和方法名来定位到一个静态方法或者实例方法。 方法引用在Java 8中的使用非常灵活。总的来说，可以分为以下几种：
1、静态方法引用：ClassName::methodName
List<Integer> ints = Arrays.asList(1,2,3);
ints.sort(Integer:compare);
2、实例上的实例方法引用 instanceReference::methodName，方法引用使用”::”定义，”::”的前半部分表示类名或者实例名，后半部分表示方法名称。如果是构造函数，则使用new表示。
words.forEach(System.out::println);

words.stream().map(word -> word.length()); // lambda
words.stream().map(String::length); // method reference

// lambda
words.stream().map(word -> {
    return new StringBuilder(word);
});
// constructor reference
words.stream().map(StringBuilder::new);

Lambda 表达式与匿名类的区别
使用匿名类与 Lambda 表达式的一大区别在于关键词的使用。对于匿名类，关键词 this 解读为匿名类，而对于 Lambda 表达式，关键词 this 解读为写就 Lambda 的外部类。
Lambda 表达式与匿名类的另一不同在于两者的编译方法。Java 编译器编译 Lambda 表达式并将他们转化为类里面的私有函数，它使用 Java 7 中新加的 invokedynamic 指令动态绑定该方法
接口与抽象类

虽然 Java 8 的接口的默认方法就像抽象类，能提供方法的实现，但是他们俩仍然是 不可相互代替的：
    接口可以被类多实现（被其他接口多继承），抽象类只能被单继承。
    接口中没有 this 指针，没有构造函数，不能拥有实例字段（实例变量）或实例方法，无法保存 状态（state），抽象方法中可以。
    抽象类不能在 java 8 的 lambda 表达式中使用。
    从设计理念上，接口反映的是 “like-a” 关系，抽象类反映的是 “is-a” 关系。

