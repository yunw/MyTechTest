近期目标：solr 站内搜索

idea: http://idea.lanyus.com/

dubbo: http://blog.csdn.net/yinwenjie/article/details/50193987

类的六大设计原则：
1、开闭原则（OCP：Open Close Principle）：
对扩展开放，对修改关闭。
2、单一职责原则（SRP：Single Responsibility Principle）：
应该有且仅有一个原因引起类的变更。即一个类只负责一项职责
3、里氏替换原则（LSP：Liskov Substitution Principle）：
定义1：如果对每一个类型为 S 的对象 o1，都有类型为 T 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 S 是类型 T 的子类型。
定义2：所有引用基类的地方必须能透明地使用其子类的对象。
里氏替换原则为良好的继承定义了一个规范：
    子类必须完全实现父类的方法
    子类可以有自己的个性
    覆盖或实现父类的方法时输入参数可以被放大
    覆写或实现父类的方法输出结果可以被缩小
4、依赖倒置原则（DIP：Dependence Inversion Principle）：
高层模块不应该依赖低层模块，两者都应该依赖其抽象。
抽象不应该依赖细节
细节应该依赖抽象
5、接口隔离原则（ISP：Interface Segregation Principle）：
客户端不应该依赖他不需要的接口
类间的依赖关系应该建立在最小的接口上
一句话：建立单一接口，不要建立臃肿庞大的接口。
6、迪米特法则（LOD：Law Of Demeter）：
迪米特法则(LOD)也称 最少知道原则（Least Knowledge Principle,LKP）
一个对象应该对其他对象有最少的了解。
工具：
http://dillinger.io/ 在线md编辑器
http://diff.hust.cc/ 在线文本比较
http://www.bejson.com/ 在线json格式化
http://tool.chinaz.com/tools/md5.aspx 在线md5加密
https://redisdesktop.com/download redis desktop manager redis图形界面工具
https://robomongo.org/download   mongodb可视化工具
https://www.sourcetreeapp.com/ git管理工具 yinsl123 SEN-8892919 github上搜hosts

linux：
http://mt.sohu.com/20160517/n449979876.shtml

db中间件：
Sharding-JDBC： 透明化数据库分库分表访问
https://github.com/dangdangdotcom/sharding-jdbc
数据库客户端工具
sqllog navicat mysql-workbench
 
mycat： 数据库分库分表中间件
https://github.com/MyCATApache/Mycat-download/tree/master/1.6-RELEASE
 
KingShard：在满足基本的读写分离的功能上，致力于简化MySQL分库分表操作；能够让DBA通过kingshard轻松平滑地实现MySQL数据库扩容
https://github.com/flike/kingshard kingshard

Ctrip DAL：是携程框架部开发的数据库访问框架
https://github.com/ctripcorp/dal

监控：
cat： 实时应用监控平台，包括实时应用监控，业务监控
https://github.com/dianping/cat

pinpoint：
https://github.com/naver/pinpoint

zipkin：
https://github.com/openzipkin/zipkin
管理：
camel： 软负载一体解决方案
https://github.com/dianping/camel
http://leonindy.coding.me/camel_in_action/posts/ch2-install/camel-admin.html

confd：配置管理
https://github.com/kelseyhightower/confd

Disconf：Distributed Configuration Management Platform(分布式配置管理平台)
https://github.com/knightliao/disconf
https://github.com/knightliao/disconf

ansible：自动化运维
http://docs.ansible.com/ansible/intro_getting_started.html

微服务：
http://mp.weixin.qq.com/s?__biz=MzAwNjY4NTQ4MA==&mid=2651175052&idx=1&sn=1e35b631532126c73610097b3197b95b&chksm=80f88ecbb78f07dd2a1d892a816d87e1f3c814e38877a5c7a9d47b0fc8d563cb6ba8ecd83c82&mpshare=1&scene=1&srcid=10192hUAQhUgFIpGi4zxvZB1#rd

urlcheck
waf应用防火墙（）
grafna
maria
statsd
elk
kvm
CMDB（Configuration Management Database）
TSP（Telematics Service Provider）汽车远程服务提供商
缓存穿透、缓存雪崩 http://blog.csdn.net/zhang_red/article/details/50774834
深入计算机系统
响应式设计

云计算：http://soft.chinabyte.com/367/12804867.shtml

redis管理系统：https://www.oschina.net/p/cachecloud-Redis

wiki系统：https://www.oschina.net/news/63011/confluence-5-8

异地多活：
http://servers.pconline.com.cn/721/7215376.html
http://blog.csdn.net/u010942020/article/details/51914719
同城异地双活：数据库步长为2， 1在一个机房2在另一个机房，数据库主从复制。根据用户（商户）id路由到数据库（mycat集群）。定时任务单机房操作（切换开关）

xmpp：即使通讯
openfire + spark ：http://www.igniterealtime.org/

惊群效应：http://blog.163.com/yichangjun1989@126/blog/static/1319720282014758021641/


文章：
http://www.yunweipai.com/archives/10335.html
https://102.alibaba.com/newsInfo.htm?newsId=28

soa 微服务：
微服务架构强调的第一个重点就是业务系统需要彻底的组件化和服务化。原有的单个业务系统会拆分为多个可以独立开发，设计，运行和运维的小应用。这些小应用之间通过服务完成交互和集成。

微服务是去ESB、去中心化，分布式的。
ESB：
1)服务的MetaData管理：在总线范畴内对服务的注册命名及寻址进行管理。
2)传输服务：确保通过企业总线互连的业务流程间的消息的正确交付，还包括基于内容的路由功能。
3)中介：提供位置透明的路由和定位服务；提供多种消息传递形式；支持广泛使用的传输协议。
4)多服务集成方式： 如JCA，Web服务，Messaging ，Adapter等。
5)服务和事件管理支持： 调用服务的记录、测量和监控数据；提供事件检测、触发和分布功能；

微服务：
1. 优点
    每个服务足够内聚，足够小，代码容易理解、开发效率提高
    服务之间可以独立部署，微服务架构让持续部署成为可能;
    每个服务可以各自进行x扩展（水平扩展）和z扩展（数据库扩展，分库分表），而且，每个服务可以根据自己的需要部署到合适的硬件服务器上;
    容易扩大开发团队，可以针对每个服务(service)组件开发团队;
    提高容错性(fault isolation)，一个服务的内存泄露并不会让整个系统瘫痪;
    系统不会被长期限制在某个技术栈上。

微服务架构的关键问题：
1、微服务架构的通信机制
a）客户端与服务器之间的通信
客户端为了完成一个业务逻辑，需要发起多个HTTP请求，从而造成系统的吞吐率下降，再加上无线网络的延迟高，会严重影响客户端的用户体验。
b）内部服务之间的通信
内部服务之间的通信方式有两种：基于HTTP协议的同步机制(REST、RPC);基于消息队列的异步消息处理机制(AMQP-based message broker)。
2、分布式数据管理
a）处理读请求
贝雕在线商店的客户账户有限额，当客户试图下单时，系统必须判断总的订单金额是否超过他的信用卡额度。信用卡额度由CustomerService管理、下订单的操作由OrderService负责，
因此Order Service要通过RPC调用向Customer Service请求数据;这种方法能够保证每次Order Service都获取到准确的额度，
但缺点是多一次RPC调用、而且Customer Service必须保持在线。
还有一种处理方式是，在OrderService这边存放一份信用卡额度的副本，这样就不需要实时发起RPC请求，但是还需要一种机制保证——当Customer Service拥有的信用卡额度发生变化时，
要及时更新存放在Order Service这边的副本。
b）处理更新请求
当一份数据位于多个服务上时，必须保证数据的一致性。
1）分布式事务
2）基于事件的异步更新

https://www.zhihu.com/question/37808426
微服务的三个问题：
问题一：客户端需求和每个微服务暴露的细粒度 API 不匹配
问题二：部分服务使用的协议对 web 并不友好，如二进制RPC或AMQP消息等。
问题三：会使得微服务难以重构，如服务拆分或服务组合的场景。

那么我们从传统的ESB能力来对上面三个问题进行一个说明，第一个问题即可能涉及到细粒度的API组合，类似组合服务无法做；其二是可能存在协议转换的问 题要解决；
其三即服务透明的问题，即需要对客户端提供一个统一的服务目录以使底层服务透明。由于以上问题，引入了API服务网关的概念，再次强调，对于API服务网关即使微服务架构里面的轻量服务总线，
解决服务管控和治理相关问题。
对API Gateway给出如下说明：
API 网关是一个服务器，也可以说是进入系统的唯一节点。这与面向对象设计模式中的 Facade 模式很像。API 网关封装内部系统的架构，并且提供 API 给各个客户端。
它还可能还具备授权、监控、负载均衡、缓存、请求分片和管理、静态响应处理等功能。
API 网关负责服务请求路由、组合及协议转换。客户端的所有请求都首先经过 API 网关，然后由它将请求路由到合适的微服务。API 网关经常会通过调用多个微服务并合并结果来处理一个请求。
它可以在 web 协议（如 HTTP 与 WebSocket）与内部使用的非 web 友好协议之间转换。
API 网关还能为每个客户端提供一个定制的 API。通常，它会向移动客户端暴露一个粗粒度的 API。以产品详情的场景为例，API网关可以提供一个端点（/productdetails?productid=xxx），
使移动客户端可以通过一个请求获取所有的产品详情。API 网关通过调用各个服务（产品信息、推荐、评论等等）并合并结果来处理请求。

API网关的优点和缺点
对于API网关的优点，其实是类似传统ESB企业服务总线的优点，即实现服务透明，同时对于服务运行过程中的日志，安全，路由，缓存等问题进行统一配置和处理，
而不需要每个微服务API实现时都去考虑。如开源的Dubbo服务总线即可以看作是一个API网关的实现。


http://www.cnblogs.com/w1lkin/p/5640407.html
持续交付：
对于任何一个可交付的软件来说，必然要经历分析、设计、开发、测试、构建、部署、运维的过程。而从持续交付的角度来分析，对于任何一个可部署的独立单元，
它都应该有一套独立的交付机制，来有效支撑其开发、测试、构建、部署与运维的整个过程。
从技术上讲，持续交付是软件系统的构建、部署、测试、审核、发布过程的一种自动化实现，而其中的核心则是部署流水线。因为部署流水线能够将这几个环节有效地连接起来。
当然，像探索性测试、易用性测试，以及管理人员的审批流程等还是需要一定的手工操作

大型网站架构的关注点：
1、分层
2、微服务化
3、分布式
4、集群
5、缓存
6、异步
7、冗余


