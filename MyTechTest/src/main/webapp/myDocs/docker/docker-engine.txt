参考：http://it.sohu.com/20160906/n467840670.shtml

swarm cluster：
1、批量创建服务：
1.12引擎中多了docker service命令，和之前的docker run命令类似，但不同的是它能同时对多主机中的容器进行管理操作。下面就以1台manager节点，5台worker节点的swarm集群来阐述这些特性。
　　首先看下容器的创建：
　　$ docker network create -d overlay mynet
　　$ docker service create –replicas 3 –name frontend –network mynet –publish 80:80/tcp frontend_image:latest
　　$ docker service create –name redis –network mynet redis:latest
　　建立容器之前先创建一个overlay的网络，用来保证在不同主机上的容器网络互通的网络模式，后面两条命令用来在同一个名叫mynet的overlay网络里新建三个相同的web容器副本，和一个 redis副本，并且每个web容器都提供统一的端口映射关系。
2、集群容错：
既然是集群，当然难免会出现某几个节点故障的情况。当三个web副本中的其中两台web节点宕机后，cluster会根据自己的服务注册发现机制，以及之前设定的值–replicas 3，
在集群中剩余的空闲节点上，重新拉起两个web副本。不难看出，docker service其实不仅仅是批量启动服务这么简单，而是在集群中定义了一种状态。Cluster会持续检测服务的健康状态并维护集群的高可用性。
3、节点服务可扩展性：
Swarm Cluster不光只是提供了优秀的高可用性，同时也提供了节点弹性扩展的功能。当web这个容器组想动态扩展至六个节点个数时，只需执行$ docker service scale frontend=6就能立刻复制出三个新的副本出来。
眼尖的朋友可能注意到了，所有扩展出来的新web副本节点都run在原先的web节点下面，如果有需求想在每台节点上都run一个相同的副本有没有办法呢？答案也是肯定的：
　　$ docker service create –mode=global –name extend_frontend frontend_image:latest
　　一条命令分分钟搞定！
4、调度机制：
Docker1.12的调度机制也值得一提。
　　所谓的调度其主要功能是cluster的server端去选择在哪个服务器节点上创建并启动一个容器实例的动作。它是由一个装箱算法和过滤器组合而成。每次通过过滤器（constraint）启动容器的时候，
swarm cluster 都会调用调度机制筛选出匹配约束条件的服务器，并在这上面运行容器。
　　还是拿刚刚那个例子来说，再加上–constraint参数，就能指定容器只run在服务器硬盘是SSD的节点上（前提是加入到cluster的节点，在启动daemon时，本身需要加上参数 --label com.example.storage=ssd）:
　　$ docker service create –replicas 3 –name frontend –network mynet –publish 80:80/tcp –constraint engine.labels.com.example.storage=ssd frontend_image:lastest

一、安装docker engine
1、更新系统
yum -y update
reboot

#安装防火墙
yum install -y firewalld
systemctl start firewalld

2、添加repos：
tee /etc/yum.repos.d/docker.repo <<-'EOF'
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/7/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF

3、安装docker engine
yum install -y docker-engine

4、启动docker engine
systemctl enable docker
systemctl start docker
systemctl status docker

5、测试：
docker run hello-world

6、创建docker用户并赋root权限
useradd docker -g docker

chmod +w /etc/sudoers
vi /etc/sudoers
## Allow root to run any commands anywhere
root    ALL=(ALL)       ALL
docker  ALL=(ALL)       ALL    #添加这一行

chmod -w /etc/sudoers


二、卸载docker engine
[root@centos71 ~]# yum list installed | grep docker
Repository base is listed more than once in the configuration
Repository updates is listed more than once in the configuration
Repository extras is listed more than once in the configuration
Repository centosplus is listed more than once in the configuration
docker-engine.x86_64                 1.12.1-1.el7.centos             @dockerrepo
docker-engine-selinux.noarch         1.12.1-1.el7.centos             @dockerrepo

删除包：
yum -y remove docker-engine.x86_64
该命令不会删除images, containers, volumes, or user-created configuration files on your host
rm -rf /var/lib/docker  #delete all images, containers, and volumes
最后手动删除用户创建的配置文件。

三、用systemd控制并配置docker
自定义docker后台进程选项。有许多方法配置后台进程标志和环境变量。
推荐的方法是使用systemd的drop-in文件。这些本地文件在/etc/systemd/system/docker.service.d目录下，是一些以.conf为扩展名的文件。也可能是
/etc/systemd/system/docker.service。
检查docker.service是否使用EnvironmentFile：
systemctl show docker | grep EnvironmentFile

vi /etc/sysconfig/docker
OPTIONS='--selinux-enabled --insecure-registry 192.168.56.71:5000'

vi /usr/lib/systemd/system/docker.service
[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network.target

[Service]
Type=notify
EnvironmentFile=-/etc/sysconfig/docker
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker
ExecStart=
ExecStart=/usr/bin/dockerd $OPTIONS
ExecReload=/bin/kill -s HUP $MAINPID
# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
#TasksMax=infinity
TimeoutStartSec=0
# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes
# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

注：要修改ExecStart的标志，必须先指定一个空的配置，紧接着一个新的配置：
ExecStart=
ExecStart=/usr/bin/dockerd $OPTIONS


systemctl daemon-reload
systemctl restart docker































