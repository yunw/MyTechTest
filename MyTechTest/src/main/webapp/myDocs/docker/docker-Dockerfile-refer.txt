docker能读取Dockerfile的指令来自动构建镜像。
Dockerfile是一个文本文件，包含了所有的用户构建镜像需要在命令行调用的命令。

Dockerfile的格式：
#注释
指令 参数
指令是大小写不敏感的。
docker按指令在Dockerfile中的顺序运行指令。第一个指令必须是“FROM”，目的是指定你要从哪个基础镜像开始构建。

解析器指令（parser directives）
解析器指令是可选的，影响这个Dockerfile后续行的处理方式。解析器指令不添加层，也不会在构建步骤中显示。解析器指令被
写成一种特殊的注释格式：# directive=value。单一指令只能使用一次。
一旦一个注释，空行或构建指令被处理，docker就不再查找解析器指令，而将他们当做注释。因此，所有的解析器指令必须在Dockerfile的最顶端。
解析器指令是不区分大小写的。然而，约定俗成用小写兵在任何解析器指令后紧接着一个空行。行继续字符在解析器指令中不被支持。

下列解析器指令是支持的：
•escape
# escape=\
或者
# escape=`
escape指令设置得字符用于在Dockerfile中转义字符。如果不设置，默认为\。
escape字符用于在一行中转义字符以及逃避一个换行符。这允许Dockerfile指令跨越多行。注意，无论逃逸解析指令是否包含在Dockerfile中，
逃逸是不会在RUN指令中执行的，除非它在行尾。
下面的指令：
FROM windowsservercore
COPY testfile.txt c:\\
RUN dir c:\
将会被解析为：
FROM windowsservercore
COPY testfile.txt c:RUN dir c:
要解决这个问题：
第一种方式是使用/代替\
第二种方式：
# escape=`

FROM windowsservercore
COPY testfile.txt c:\
RUN dir c:\

环境置换
环境变量（由ENV语句定义）也可以用于某些指令。转义也被处理包含在变量类似的语法中。
环境变量表示为$variable_name 或${variable_name}。他们是等效的，后者常用与处理没有空格的变量名称，例如：${foo}_bar。
${variable_name}语法也支持下面一些标准的bash修饰符：
•${variable:-word}表示：如果变量设置了就用设置的值，否则用word的值。
•${variable:+word}表示：如果变量设置了就用word的值，否则用空字符串。
上面的word可以是任意字符串，包括额外的环境变量。
在变量的前面加一个\来转义，变量就变成字面值了：
FROM busybox
ENV foo /bar
WORKDIR ${foo}   # WORKDIR /bar
ADD . $foo       # ADD . /bar
COPY \$foo /quux # COPY $foo /quux
下列指令都支持环境变量：
•ADD
•COPY
•ENV
•EXPOSE
•LABEL
•USER
•WORKDIR
•VOLUME
•STOPSIGNAL
•ONBUILD（当它与上面支持的指令相结合） 

环境变量将在每个命令中对相同的变量使用相同的值。下面的例子：
ENV abc=hello
ENV abc=bye def=$abc
ENV ghi=$abc
def的值是hello而不是bye。ghi的值是bye，因为它与设置abc为bye的命令不是同一个命令。

FROM
FROM <image>
or
FROM <image>:<tag>
or
FROM <image>@<digest>
FROM指令为接下来的指令设置基础镜像。一个合法的Dockerfile必须有一个FROM做为第一个指令。镜像可以是任何合法的镜像。
•FROM必须是第一个非注释的指令
•FROM可以出现多次在一个Dockerfile中，用于建立多个镜像。
•tag或digest是可选的。如果不提供默认为latest。

MAINTAINER
MaINTAINER <name>
该指令允许你设置创建镜像的作者。

RUN
有两种格式：
•RUN <command> [shell格式，命令在shell中运行，linux默认为/bin/sh -c，windows默认为：cmd /S /C]
•RUN ["executable", "param1", "apram2"] [exeform]
RUN指令将在当前镜像的顶端的一个新层中执行任何命令并提交结果。提交结果的镜像将在接下来的步骤中使用。
注：exeform被解析为json数组，因此必须用双引号

CMD
•CMD ["executable", "param1", "param2"] [exec 格式，这是首选形式]
•CMD ["param1", "param2"] [作为入口的默认参数]
•CMD command param1 param2 [shell格式]
CMD的主要目的是提供一个默认的执行容器。
如果用户指定了docker run的参数，他们将覆盖CMD中的默认指定。

LABEL
LABEL <key>=<value> <key>=<value> <key>=<value> ...
LABEL指令添加元数据到镜像中。一个LABEL是一个k/v对。
一个镜像可以有多个label。docker建议在一个LABEAL指令中指定多个label，如果可能的话。每个LABEL指令会产生一个新的层，这会导致效率低下如果你用许多label。
例如：
LABEL multi.label1="value1" multi.label2="value2" other="value3"

EXPOSE
EXPOSE <port> [<port>...]
EXPOSE指令告诉docker，该容器在运行时监听这些指定的网络端口。EXPOSE不会使这些端口能被host访问。要做到这一点，你必须使用-p标志发布一个端口范围或-P标志发布所有已
暴露的端口。

ENV
ENV <key> <value>
ENV <key>=<value>...
ENV指令设置环境变量。

ADD
•ADD <src>... <dest>
•ADD ["<src>",... "<dest>"][如果路径包含空格必须使用这种形式]
ADD指令从<src>拷贝新文件，目录或远程文件URL并将它们加入镜像的文件系统的<dest>目录下。
可以指定多个<src>，但如果它们是文件或目录，它们必须是构建路径的相对路径
<dest>必须是绝对路径，或是WORKDIR的相对路径。
例如：
ADD test /relativeDir/  # 添加 test 到 WORKDIR/relativeDir/
ADD test /absoluteDir/  # 添加 test 到 /absoluteDir/
所有的新文件和目录都是由UID和GID为0的用户创建的。
ADD遵守下列规则：
•<src>路径必须在构建上下文内部，你不能 ADD ../something /something。因为在docker build的第一步，上下文目录（以及子目录）就被发送到docker守护进程了。
•如果<src>是一个url并且<dest>不是以一个斜线（/）结束，那么文件会从url下载并拷贝到<dest>
•如果<src>是一个url并且<dest>是以一个斜线（/）结束，那么文件名从url中推断出来，文件被下载到<dest>/<filename>。例如：
 ADD http://example.com/foobar /将创建文件/foobar。url必须有一个非平凡的路径，以便可以从中发现适当的文件名【http://example.com是不会正常工作的】
•如果<src>是一个目录，这个目录的整个内容被复制，包括文件系统元数据。
  注：目录本身不拷贝，只复制内容。
•如果<src>是一个本地tar文档，有一个能被识别的压缩格式【gzip,bzip2或xz】将被解压为一个目录。来自远程url的资源不会被解压缩。
•
•
•
•

COPY
•COPY <src>... <dest>
•COPY ["<src>",..."<dest>"]
COPY指令从<src>复制新文件和目录并将它们添加到容器的<dest>路径下

ENTRYPOINT
•ENTRYPOINT ["executablea", "param1", "apram2"]【exec形式，推荐】
•ENTRYPOINT command param1 param2 【shell形式】
ENTRYPOINT允许你配置一个容器，它将作为可执行的容器运行。

CMD和ENTRYPOINT交互：
•Dockerfile至少要指定一个CMD或ENTRYPOINT命令
•ENTRYPOINT将被定义，如果要将容器作为可执行的容器。
•CMD作为给ENTRYPOINT传递默认参数的一种方式或在容器中执行一个点对点的命令
•CMD可以被覆盖，当运行带有可替代参数的容器的时候

VOLUME
VOLUME ["/data"]
参考：https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-directory-as-a-data-volume

USER
USER daemon
USER指令设置用户名或UID，当运行这个镜像以及Dockerfile中接下来任何RUN，CMD和ENTRYPOINT指令的时候，用这个用户。

WORKDIR
WORKDIR /path/to/workdir
WORKDIR指令为接下来的RUN，CMD，ENTRYPOINT，COPY以及ADD指令设定工作目录。
它可以设定多次。如果提供的是相对路径，它相对之前的工作目录，例如：
WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
最终pwd命令的输出是/a/b/c。
WORKDIR可以解析在它之前设置的环境变量，而且只能用显式设置的环境变量：
ENV DIRPATH /path
WORKDIR $DIRPATH/$DIRNAME
RUN pwd
最终的输出为：/path/$DIRNAME

ARG

ONBUILD

STOPSIGNAL

HEALTHCHECK

SHELL


















