win7与virtualbox centos7通信方法：http://blog.csdn.net/lydyangliu/article/details/12276689

yum install -y docker
service docker start
chkconfig docker on

查看可用的jdk列表：
yum search java | grep -i --color JDK

1、生成Dockerfile，Dockerfile的内容如下（一个包含java和tomcat的镜像）
cd /root/imgtest
vi Dockerfile
FROM centos
MAINTAINER yinsl "2225646595@qq.com"
RUN yum install -y java-1.8.0-openjdk-devel.x86_64 wget
RUN wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.0.33/bin/apache-tomcat-8.0.33.tar.gz
RUN tar zxf apache-tomcat-8.0.33.tar.gz -C /usr/local
EXPOSE 8080
CMD /usr/local/apache-tomcat-8.0.33/bin/catalina.sh run

3、生成镜像
docker build -t tomcat:v8.0.33 .

4、查看镜像列表
docker images

6、运行容器
docker run -p 80:8080 tomcat:v8.0.33    #80:8080是宿主机的80端口映射到容器的8080端口

7、查看容器：
docker ps -a

8、宿主机上的浏览器输入：http://localhost就可以看到tomcat首页了
如果没有图形界面，也可输入：curl http://localhost/

9、停止容器：
docker stop containerId

10、启动容器：
docker start containerId

10、删除容器：
docker rm containerId

11、删除镜像
docker rmi imgId
批量删除none镜像：docker rmi $(docker images | awk '/^<none>/ { print $3 }')


docker私有仓库搭建（v1）：
1、安装docker
yum install -y docker
service docker start
chkconfig docker on

2、下载registry镜像
docker pull registry

3、启动registry容器
docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry
默认情况下，仓库存放于容器内的/tmp/registry目录下，这样如果容器被删除，则存放于容器中的镜像也会丢失，
所以我们一般情况下会指定本地一个目录挂载到容器内的/tmp/registry下

4、测试（另一台机器）：
a、下载一个小镜像：
[root@localhost ~]# docker pull busybox
[root@localhost ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
docker.io/busybox   latest              307ac631f1b5        8 weeks ago         1.113 MB

b、修改该镜像的tag：
[root@localhost ~]# docker tag busybox 10.25.31.102:5000/busybox
[root@localhost ~]# docker images
REPOSITORY                  TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
docker.io/busybox           latest              307ac631f1b5        8 weeks ago         1.113 MB
10.25.31.102:5000/busybox   latest              307ac631f1b5        8 weeks ago         1.113 MB

c、把打了tag的镜像上传到私有仓库：
[root@localhost ~]# docker push 10.25.31.102:5000/busybox
The push refers to a repository [10.25.31.102:5000/busybox] (len: 1)
unable to ping registry endpoint https://10.25.31.102:5000/v0/
v2 ping attempt failed with error: Get https://10.25.31.102:5000/v2/: dial tcp 10.25.31.102:5000: no route to host
 v1 ping attempt failed with error: Get https://10.25.31.102:5000/v1/_ping: dial tcp 10.25.31.102:5000: no route to host
报错的原因是，上传镜像默认使用了https协议。
解决方案：
[root@localhost ~]# vi /etc/sysconfig/docker
#OPTIONS='--selinux-enabled'
OPTIONS='--selinux-enabled --insecure-registry 10.25.31.102:5000'
然后重启docker：
[root@localhost ~]# service docker restart
Redirecting to /bin/systemctl restart  docker.service
然后重新上传：
[root@localhost ~]# docker push 10.25.31.102:5000/busybox
The push refers to a repository [10.25.31.102:5000/busybox] (len: 1)
Sending image list
Pushing repository 10.25.31.102:5000/busybox (1 tags)
4b51ded9aed1: Image successfully pushed 
307ac631f1b5: Image successfully pushed 
Pushing tag for rev [307ac631f1b5] on {http://10.25.31.102:5000/v1/repositories/busybox/tags/latest}

查看私有仓库中的镜像：
[root@localhost ~]# curl 10.25.31.102:5000/v1/search
{"num_results": 1, "query": "", "results": [{"description": "", "name": "library/busybox"}]}


docker私有仓库搭建（v2）：
mkdir -p /opt/docker/registry/data
mkdir -p /opt/docker/registry/conf
#版本可在https://github.com/docker/distribution上查看
docker run -d -p 5000:5000 -v /opt/docker/registry/data:/tmp/registry registry:2.4
yum -y install httpd-tools
htpasswd -c /opt/docker/registry/conf/docker-registry.htpasswd jack
htpasswd -b /opt/docker/registry/conf/docker-registry.htpasswd mick
vi  /opt/nginx/conf/nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /opt/nginx/conf/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /opt/nginx/conf.d/*.conf;

    upstream webserver {                  
       server 10.25.31.102:5000;        
    }
    server {
            listen       8080 default_server; #http://10.25.31.102:8080/v2
            location / {
		auth_basic  "please input username/password sina";
		auth_basic_user_file  /opt/docker/registry/conf/docker-registry.htpasswd;
		proxy_pass http://webserver;   # 
            }
    }

}
启动nginx
/opt/nginx/sbin/nginx
在浏览器中输入：http://10.25.31.102:5000/v2/可以看到仓库中的镜像（json格式）

docker pull busybox
docker tag busybox 10.25.31.102:5000/busybox
docker push 10.25.31.102:5000/busybox

再次查看：http://10.25.31.102:8080/v2/_catalog
{"repositories":["busybox","tomcat8"]}






