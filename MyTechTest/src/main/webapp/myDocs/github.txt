github:yinsl 2225646595/yin_slin123

https://github.com/login

https://github.com/yinsl/TechTest.git

https://github.com/yinsl/CMS.git

git文件的三种状态：http://phplaber.iteye.com/blog/1699926
Untracked files：未跟踪的文件。也就是文件在暂存区没有生成快照。该状态下可以：
                                         执行：git add <filename>将文件变为跟踪的文件，也就是将文件放入暂存区（staging area）了
Changes to be committed：在暂存区域生成了快照，等待被提交。这是执行git add命令之后的状态。该状态下可以：
                         1、git push 将代码提交到远程仓库
                         2、git reset HEAD <filename>将文件从暂存区移走，变为未跟踪状态
Changes not staged for commit：如果一个已经提交的文件又有新的修改没有被提交，就是这个状态。该状态下可以：
                               1、执行 git add <filename>将新的没有提交的内容提交到暂存区，变成等待提交状态
                               2、执行git checkout -- <filename>将修改撤销掉，文件内容回滚到上次提交时的内容

git for windows:
下载：https://git-for-windows.github.io/
然后一路默认安装
生成ssh key：
鼠标右键-->git bash here
ssh-keygen -t rsa -C "邮箱地址"
cd ~/.ssh
将id_rsa.pub文件的内容拷贝到github的资源库中即可。


rsa private key:C:\Users\IBM_ADMIN\.ssh\id_rsa

Who are you? Mr. yin.
What's your name? yin.

git clone --depth=14 https://github.com/angular/angular-phonecat.git
--depth=14 #只下载最近的14个提交结果，该选项可让下载更快更小。

github sshkey:
1.From the Terminal or Git Bash, run ssh-keygen
2.Confirm the default path .ssh/id_rsa
3.Enter a passphrase (recommended) or leave it blank.
Remember this passphrase, as you will need it to unlock the key whenever you use it.
4.Open ~/.ssh/id_rsa.pub and copy & paste the contents into
the box below, then click on "Add".
Note that id_rsa.pub is your public key and can be shared,
while id_rsa is your private key and should be kept secret.


关于checkout：
例如：
git clone git://gitorious.org/android-eeepc/mesa.git
进入目录如果只发现一个.git，那么需要checkout：
先查看分支
git branch -r

origin/android
origin/mesa-es
origin/mesa-es-dri
然后checkout：
git checkout origin/android
再看目录，就发现有代码了。

clone branch:
git clone <remote_repo> -b <branch>
例如：git clone ssh://git@git.9now.net:10022/yangjunming/mwee_paidui_soa.git -b dev_cat

将文件加入索引：
git add modifiedfile   #将工作区的修改添加到缓存区
git add --all          #将工作区的所有修改添加到缓存区

提交到本地：
git commit -m "your message"  #将缓存区的所有修改提交到当前分支

提交到远程分支：
git push origin <local_branch_name>:<remote_branch_name>
例如：git push origin dev_cat:dev_cat

删除远程分支：
git push --delete origin branchname
例如：git push --delete origin dev_cat
删除本地分支：
git branch -d <本地分支名称>
切换到一个新的分支：
git checkout <新分支名称> 
在本地创建新分支：
git branch <新分支名称>

创建远程分支
git push origin <本地分支名称>:<远程分支名称>

关联远程分支：
git push --set-upstream origin <远程分支>
该命令将本地分支和远程分支建立关联

更新代码到本地：
git pull [options] [<repository> [<refspec>…​]]
<repository>:
1、 GIT URLS:包含了传输协议，远程服务器地址，仓库路径。
例如：
ssh://[user@]host.xz[:port]/path/to/repo.git/
http[s]://host.xz[:port]/path/to/repo.git/
2、REMOTES：下面列出的其中一个的名称，可以代替<repository>：
a：git配置文件：$GIT_DIR/config中的remote
b：$GIT_DIR/remotes下的一个文件
c：$GIT_DIR/branches下的一个文件
在命令行中使用REMOTES可以允许忽略<refspec>，因为都有一个默认的<refspec>

<refspec>：
格式：<src>:<dist>
src:远程仓库ref
dist：本地仓库
例如：
git pull origin dev:dev




















