分布式事务处理（  Distributed Transaction Processing  ，  DTP  ）

CAP：
C-Consistency 一致性 
A: Availability 可用性(指的是快速获取数据) 
P: Tolerance of network Partition 分区容忍性(分布式) 

最终一致性：过程松，结果紧，最终结果必须保持一致性 

BASE理论：
base：碱
acid：酸
Basically Availble --基本可用
Soft-state --软状态/柔性事务
"Soft state" 可以理解为"无连接"的, 而 "Hard state" 是"面向连接"的
Eventual Consistency --最终一致性
最终一致性， 也是是 ACID 的最终目的。

牺牲高一致性，获得可用性或可靠性。

BASE思想的主要实现有
1.按功能划分数据库
2.sharding碎片 

BASE思想主要强调基本的可用性，如果你需要高可用性，也就是纯粹的高性能，那么就要以一致性或容错性为牺牲


数据的对象和范围
你要考虑你的幂等的全局性：空间全局性和时间全局性。     
空间全局性：比如是交易流水幂等还是用户ID幂等。是某种类型交易流水幂等，还是某个人|机构|渠道的交易流水幂等     
时间全局性：是幂等几秒，还是几分钟，还是永远。不同的要求，可以有不一样的解决方案、难度和成本。

幂等方案    对时间全局性要求高的，可能就必须选择DB这种持久化方案比较可靠，但是性能不够好啊（然后就要考虑loadmemory，
以及数据同步的问题，就一步还要考虑实时性要求了）    在空间的要求中，根据不同的幂等范围，可以考虑分布式数据库（分布式集群全局流水号幂等）。
还是某种少量数据幂等（可能只需要单台，做好主备）。

重复消息是SOA服务实现中非常常见的问题，你永远不要指望调用方每次请求消息不一样，对于读操作，重复消息可能无害，
可对于写操作很可能就是灾难。可以通过幂等(Idempotent)模式处理重复的消息，
基本处理思路是：1、调用者给消息一个唯一请求ID标识。ID标识一个工作单元，这个工作单元只应执行一次，
工作单元ID可以是Schema的一部分，也可以是一个定制的SOAP Header，服务的Contract 可以说明这个唯一请求ID标识是必须的；
2、接收者在执行一个工作单元必须先检验该工作单元是否已经执行过。检查是否执行的逻辑通常是根据唯一请求ID ，
在服务端查询请求是否有记录，是否有对应的响应信息，如果有，直接把响应信息查询后返回；如果没有，那么就当做新请求去处理。

网络通讯的危险期
由于网络通讯故障随时可能发生，任何发出请求后等待回应的程序都会有失去联系的危险。这种危险发生在发出请求之后，
服务器返回应答之前，如果在这个期间网 络通讯发生故障，发出请求一方无法收到回应，于是无法判断服务器是否已经成功地处理请求，
因为收不到回应可能是请求没有成功地发送到服务器，也可能是服务 器处理完成后的回应无法传回请求方。
这段时间称为网络通讯的危险期(In-doubt Time)。很显然，
网络通讯的危险期是分布式系统除单点可靠性之外需要考虑的另一个可靠性问题。

