随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。 

单一应用架构 
当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。 
此时，用于简化增删改查工作量的 数据访问框架(ORM) 是关键。 

垂直应用架构 
当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。 
此时，用于加速前端页面开发的 Web框架(MVC) 是关键。 

分布式服务架构 
当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。 
此时，用于提高业务复用及整合的 分布式服务框架(RPC) 是关键。 

流动计算架构 
当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。 
此时，用于提高机器利用率的 资源调度和治理中心(SOA) 是关键。 

微服务：
Martin Fowler所写的一篇文章。文章中他提到：“该微服务的架构特点是要开发一种独立的应用作为一套微小服务。各自运行在自己独立的进程中，并与其它轻量级装置进行沟通，通常是HTTP型API。
这些服务都是建立在业务能力的基础上，并以全自动化开发设备作为保障独立运行。”
首先，我们先单独谈谈微服务。它可以在“自己的程序”中运行，并通过“轻量级设备与HTTP型API进行沟通”。关键在于该服务可以在自己的程序中运行。
通过这一点我们就可以将服务公开与微服务架构（在现有系统中分布一个API）区分开来。在服务公开中，许多服务都可以被内部独立进程所限制。
如果其中任何一个服务需要增加某种功能，那么就必须缩小进程范围。在微服务架构中，只需要在特定的某种服务中增加所需功能，而不影响整体进程。

五大部署技术：
容器管理系统：docker（仓库、镜像、容器）
服务发现框架：consul、zookeeper、mesos、dubbo
容器集群：Kubernetes，Amazon Elastic Container service和Docker Compose
即时生效的API：
无服务器服务：















