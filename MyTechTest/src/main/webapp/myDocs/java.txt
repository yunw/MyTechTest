分布式文件系统mfs（moosefs）

system props : http://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html

CDN的全称是ContentDeliveryNetwork,即内容分发网络

java -cp ./A.jar;./B.jar;. xxx.HelloWord

一、集群同步会话状态的方法：
1、客户端cookie加密
2、application server的session copy（缺陷：广播风暴、序列化影响性能）
3、数据库保存session
4、使用共享存储来保存session
5、使用memcached、redis来保存session
6、使用terracotta来保存session

二、jvm性能调优都做了什么：
JVM性能调优有很多设置,这个参考JVM参数即可.
主要调优的目的:
    控制GC的行为.GC是一个后台处理,但是它也是会消耗系统性能的,因此经常会根据系统运行的程序的特性来更改GC行为
    控制JVM堆栈大小.一般来说,JVM在内存分配上不需要你修改,(举例)但是当你的程序新生代对象在某个时间段产生的比较多的时候,就需要控制新生代的堆大小.同时,还要需要控制总的JVM大小避免内存溢出
    控制JVM线程的内存分配.如果是多线程程序,产生线程和线程运行所消耗的内存也是可以控制的,需要通过一定时间的观测后,配置最优结果

三、负载均衡的原理
根据配置规则，将客户端请求智能地分发到后端应用服务器。
调度算法：轮询、加权轮询（服务器处理能力不同）、最少连接、加权最少连接、随机、加权随机、源地址散列、源地址端口散列
负载均衡转发方式：
NAT方式（network address translation）：将客户端报文的目的地址转为真实服务地址，发给真实服务器，并将server响应报文的源地址转换为虚服务的ip地址，发给客户端。
DR方式（Direct Routing）：改写请求报文的mac地址，将请求发给真实服务器，真实服务器将响应直接返回给客户端。
防火墙方式：

四、数据库事务属性ACID
1）原子性（Atomicity）
所谓原子性就是将一组操作作为一个操作单元，是原子操作，即要么全部执行，要么全部不执行。
2）一致性（Consistency）
事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。
3）隔离性（Isolation）
隔离性指并发的事务是相互隔离的。即一个事务内部的操作及正在操作的数据必须封锁起来，不被其它企图进行修改的事务看到。
4）持久性（Durability）
持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。即一旦一个事务提交，DBMS（Database Management System）保证它对数据库中数据的改变应该是永久性的，持久性通过数据库备份和恢复来保证。

五、数据库设计范式
第一范式：无重复列
所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。简而言之，第一范式就是无重复的列。  
说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。 
第二范式：属性完全依赖于主键[消除部分子函数依赖]
第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。例如员工信息表中加上了员工编号（emp_id）列，因为每个员工的员工编号是惟一的，因此每个员工可以被惟一区分。这个惟一属性列被称为主关键字或主键、主码。  
        第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，第二范式就是属性完全依赖于主键。
第三范式：属性不依赖于其它非主属性[消除传递依赖]
满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。
例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在的员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。
如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性。

六、序列化的什么特点：
如果某个类能够被序列化，其子类也可以被序列化。声明为static和transient类型的成员数据不能被序列化。因为static代表类的状态， transient代表对象的临时数据。

什么时候使用序列化：
一：对象序列化可以实现分布式对象。主要应用例如：RMI要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象时一样。
二：java对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。可以将整个对象层次写入字节流中，可以保存在文件中或在网络连接上传递。
利用对象序列化可以进行对象的"深复制"，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。

七、数据库索引的作用和优点缺点 
优点：
第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。
第二，可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。
第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。
第四，在使用分组和排序 子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。
第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。
缺点：
第一，创建索引和维护索引要耗费时间，这种时间随着数据 量的增加而增加。
第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。
第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。

八、Hibernate具用的三种检索方式
HQL检索方式   
QBC检索方式   QBC(Query By Criteria) API提供了检索对象的另一种方式，它主要由Criteria接口、Criterion接口和Expresson类组成，它支持在运行时动态生成查询语句。
SQL检索方式

九、什么是AOP 请祥述 
  答: 是面向切面编程    
AOP 把软件系统分为两个部分：核心关注点和横切关注点。
所谓的核心关注点，是业务处理的主要流程，也就是说这个解决方案要做的事。
所谓横切关注点，是与核心业务无关的部分，它把常发生在核心关注点的多处，而各处基本相似，如日志，事务，权限等 。

十、GET和POST有什么区别？
GET是明码传递，传递的数据量有限制。POST是暗码传递。

十一、forward与redirect区别?  
Forward是在服务器端进行分发,分发后地址栏无变化,用户看不到分发后的地址.
而redirect是在客户端进行的页面重定向,地址栏上会显示重定向后的网页.
forward的页面只能是在同一个web应用程序之内,而重定向可以定位到外部资源.
forward后还是同一个request请求,而重定向后以前的request请求就不存在了.   

十二、BeanFactory的作用是什么？   
BeanFactory是配置、创建、管理bean的容器，有时候也称为bean上下文。Bean与bean的依赖关系，也是由BeanFactory负责维护的。

十三、XMLHttpRequest对象是什么，它有哪些常用方法？     
一个 JavaScript 对象。是Ajax 的核心。   
该对象的方法和属性。   
    open()：建立到服务器的新请求。    
    send()：向服务器发送请求。    
    abort()：退出当前请求。    
    readyState：提供当前 HTML 的就绪状态。    
    responseText：服务器返回的请求响应文本。
    
十四、spring bean实例化流程：
实例化bean对象-->设置bean属性-->检查aware相关接口并设置相关依赖-->BeanPostProcessor前置处理-->
检查是否InitializingBean以决定是否调用afterPropertiesSet方法-->检查是否有自定义的init-method-->
BeanPostProcessor后置处理-->注册与销毁对象相关的回调接口。

十五、spring aop
切面（aspect）：将一个横跨多个类的关注的模块化。事务管理就是一个在企业java应用中横切关注很好的列子。具体到spring的aop，切面是由合规的类（xml配置的）或者由@Aspect注解过的合规的类
连接点（join point）：程序执行期间的一个点，例如一个正在执行的方法或一个异常的句柄。具体到spring的aop，通常是指一个方法的执行。
通知（advice）：切面在一个特定的连接点处执行的动作。通知类型包括：环绕、前置、后置。许多aop框架，包括aop，将通知塑造为一个拦截器，围绕着一个连接点维护了一个拦截器链。
切点（pointcut）：是一个匹配连接点的断言。通知由切点表达式关联并且在任何一个被切点匹配到的连接点上运行。切点表达式匹配连接点的思想是aop的核心。spring
          默认使用aspectj切点表达式。
介绍（Introduction）：在一个类型上声明额外的方法或属性。spring aop允许你介绍新的接口（以及一个相应的实现）给任何被通知的对象。例如，你可以使用介绍让一个Bean实现一个IsModified接口，来简化缓存。
目标对象（target object）：被一个或多个切面通知的对象。因为spring aop是用运行时代理实现的，所以这个对象永远是一个代理对象。
aop代理（aop proxy）：一个由aop框架创建的对象，用于实现切面契约（通知方法执行等等）。在spring框架中，一个aop代理是一个jdk动态代理或cglib代理。
织入（Weaving）：连接切面与其它应用类型或对象来创建一个通知对象。这可以在编译期（例如：使用aspectj编译器），加载期或运行时。spring aop在运行期执行织入。

十六、b+树索引
平衡多叉树，树的深度比平衡二叉树低。
B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；
重复，直到所对应的儿子指针为空，或已经是叶子结点；
因此，B-Tree的查找过程是一个顺指针查找结点和在结点的关键字中进行查找的交叉进行的过程。

B-树：多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；
B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；
B*树：在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3；

十七、海量数据水平分表
1、按号段分：1--100w、100w--200w。。。分表：优点是可部分迁移，缺点是数据分布不均
2、hash取模分表：优点：数据分布均匀，缺点，数据迁移麻烦，不能按机器性能分摊数据
3、在认证库中保存数据库配置
就是建一个table，保存主键到table的映射关系。优点：灵活性强，一对一关系。缺点：多一次查询，性能低

十八、有两个很大的文件，每个文件中都有1亿行，每行一个整数。问这两个集合的交集是什么。给定的前提是机器内存不足以完全装入任意一个文件。

