DefaultListableBeanFactory实例化bean流程：
createBean() --> doCreateBean() --> initializeBean()-->invokeAwareMethods()-->applyBeanPostProcessorsBeforeInitialization()-->
invokeInitMethods()-->afterPropertiesSet()-->invokeCustomInitMethod()-->applyBeanPostProcessorsAfterInitialization()

Bean factory implementations should support the standard bean lifecycle interfaces
as far as possible. The full set of initialization methods and their standard order is:
1. BeanNameAware's {@code setBeanName}<br>
2. BeanClassLoaderAware's {@code setBeanClassLoader}<br>
3. BeanFactoryAware's {@code setBeanFactory}<br>
4. ResourceLoaderAware's {@code setResourceLoader}(only applicable when running in an application context)<br>
5. ApplicationEventPublisherAware's {@code setApplicationEventPublisher}(only applicable when running in an application context)
6. MessageSourceAware's {@code setMessageSource}(only applicable when running in an application context)<br>
7. ApplicationContextAware's {@code setApplicationContext}(only applicable when running in an application context)<br>
8. ServletContextAware's {@code setServletContext}(only applicable when running in a web application context)<br>
9. {@code postProcessBeforeInitialization} methods of BeanPostProcessors<br>
10. InitializingBean's {@code afterPropertiesSet}<br>
11. a custom init-method definition<br>
12. {@code postProcessAfterInitialization} methods of BeanPostProcessors

On shutdown of a bean factory, the following lifecycle methods apply:
1. DisposableBean's {@code destroy}
2. a custom destroy-method definition