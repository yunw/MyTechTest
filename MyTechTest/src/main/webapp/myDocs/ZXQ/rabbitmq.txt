sudo su - root #转为root用户
sudo yum install -y openssl* openssl-devel zlib-devel gcc gcc-c++ make autoconf readline-devel curl-devel expat-devel gettext-devel ruby rubygems ruby-devel
sudo iptables -I INPUT -p tcp --dport 4369 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 15672 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 25672 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 5672 -j ACCEPT
#防火墙规则持久化
sudo service iptables save

一、安装配置erlang：
cd /data/Downloads
wget http://www.rabbitmq.com/releases/erlang/erlang-17.4-1.el6.x86_64.rpm
sudo yum install -y erlang-17.4-1.el6.x86_64.rpm
#sudo rpm -ivh erlang-17.4-1.el6.x86_64.rpm

sudo vi /etc/profile

export PATH=$PATH:/usr/lib64/erlang/bin

source /etc/profile

启动epmd服务：
sudo /usr/lib64/erlang/erts-6.3/bin/epmd -daemon  # 关闭 sudo /usr/lib64/erlang/erts-6.3/bin/epmd -kill 
sudo ps -ef | grep erlang

二、安装rabbitmq
cd /data/Downloads
wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.5.6/rabbitmq-server-3.5.6-1.noarch.rpm
sudo yum install -y rabbitmq-server-3.5.6-1.noarch.rpm

修改配置：
sudo vi /etc/rabbitmq/rabbitmq-env.conf

RABBITMQ_LOG_BASE=/app/rabbitmq/logs
RABBITMQ_MNESIA_BASE=/app/rabbitmq/data

保存，继续操作：

sudo /usr/lib64/erlang/erts-6.3/bin/epmd -kill
sudo /usr/lib64/erlang/erts-6.3/bin/epmd -daemon

sudo chkconfig rabbitmq-server on
sudo service rabbitmq-server start

sudo rabbitmqctl add_user admin admin
sudo rabbitmqctl list_users

sudo rabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"
sudo rabbitmqctl list_permissions -p /

sudo rabbitmqctl set_user_tags admin administrator
sudo rabbitmqctl list_users

sudo rabbitmq-plugins enable rabbitmq_management
sudo service rabbitmq-server restart

打开浏览器，输入：
http://10.25.23.106:15672
在登录界面输入用户名/密码：admin/admin即可进入console了。

三、创建集群：
注1：为了保证集群能运行，必须保证：4369、25672可以访问。
注2：集群的通信是通过erlang的消息传递，因此集群的所有节点必须有相同的erlang cookie。
注3：集群的节点上运行的erlang、rabbitmq的版本必须相同。
注4：visual host、exchange、user、permission都会在集群的所有节点上镜像；队列可能只在一个节点上，或镜像到多个节点。
注5：客户端连接到任意一个节点，都可以看到集群中的所有的队列，即使队列并不在该节点上。
1、集群节点间需能互相访问，故每个集群节点的hosts文件应包含集群内所有节点的信息以保证互相解析
故修改五台机器的/etc/hosts文件：
将
10.25.23.101     SSSVL0301
10.25.23.106     SSSVL0306
10.25.23.107     SSSVL0307
10.25.23.108     SSSVL0308
10.25.23.109     SSSVL0309
10.25.23.110     SSSVL0310

10.129.13.73 SCSV00170
10.129.13.74 SCSV00171
10.129.13.75 SCSV00172
加入hosts文件中，保证五台机器能互相访问。

2、将五台中的一台机器的/var/lib/rabbitmq/.erlang.cookie内容拷贝到另四台的同名文件中。
sudo chmod +w /var/lib/rabbitmq/.erlang.cookie 
sudo vi /var/lib/rabbitmq/.erlang.cookie #IBFHTAJYDQCSRKESDAUT

3、添加集群节点：
a）在10.25.23.107上执行：
sudo rabbitmqctl stop_app
sudo rabbitmqctl join_cluster rabbit@SSSVL0306
sudo rabbitmqctl start_app
sudo rabbitmqctl cluster_status

b）在10.25.23.108上执行：
rabbitmqctl stop_app
rabbitmqctl join_cluster rabbit@SSSVL0307
rabbitmqctl start_app
rabbitmqctl cluster_status

c）在10.25.23.109上执行：
rabbitmqctl stop_app
rabbitmqctl join_cluster rabbit@SSSVL0306
rabbitmqctl start_app
rabbitmqctl cluster_status

d）在10.25.23.110上执行：
rabbitmqctl stop_app
rabbitmqctl join_cluster --ram rabbit@SSSVL0306  #纯内存节点
rabbitmqctl start_app
rabbitmqctl cluster_status

按照上述步骤，可添加更多节点。

4、改变节点类型：
将内存节点变为磁盘节点
rabbitmqctl stop_app
rabbitmqctl change_cluster_node_type disc  
rabbitmqctl start_app

将磁盘节点变为内存节点
rabbitmqctl stop_app
rabbitmqctl change_cluster_node_type ram  
rabbitmqctl start_app

5、删除节点：
集群节点必须显式删除。在要删除的节点上执行：
rabbitmqctl cluster_status
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl start_app
rabbitmqctl cluster_status
注意：因为集群的首个节点默认为集群名称（rabbit@SSSVL0306）。因此将首节点（rabbit@SSSVL0306）删除后再添加到集群的时候，因为节点名称和集群名称
相同，rabbitmqctl join_cluster rabbit@SSSVL0306 这个命令会报错。可执行下述命令：rabbitmqctl join_cluster rabbit@SSSVL0307
即，将节点改一下（join_cluster后的节点是当前集群中随机的节点）

6、策略管理：
rabbitmqctl set_policy [-p vhostpath] [--priority priority] [--apply-to apply-to] {name} {pattern} {definition}
hostpath：虚拟主机路径
priority：优先级，整数，值越大优先级越高，默认为零
apply-to：设置策略的目标对象，可以是queues，exchanges或“all”，默认为“all”
name：策略的名称
pattern：正则表达式，匹配apply-to指定类型的资源
definition：策略定义，JSON格式
例如：
rabbitmqctl set_policy federate-me "^amq\." '{"federation-upstream-set":"all"}' --priority 1 --apply-to exchanges
含义：策略名称：federate-me；所有以“amq.”开头的虚拟主机为“/”的exchange都会匹配，策略优先级为1。

rabbitmqctl set_policy ha-two "^two\." '{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}' --apply-to queues
含义：虚拟主机“/”上的以“two”开头的队列会自动镜像到集群中的两个节点上，消息自动同步，该策略的优先级为0。

详细策略配置规则参考：http://www.rabbitmq.com/parameters.html

集群bug修复版升级：
service rabbitmq-server stop
cd /data/Downloads
wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.5.6/rabbitmq-server-3.5.6-1.noarch.rpm
yum install -y rabbitmq-server-3.5.6-1.noarch.rpm
service rabbitmq-server start
升级完成：在浏览器中输入：
http://ip:15672/
网页右上角显示的是升级后的版本号。
注意：先升级磁盘节点，后升级内存节点。
