yarn(Yet Another Resource Negotiator)

MRv1的局限：
1、扩展性差：MRv1中的jobtracker同时兼备了资源管理和作业控制两个功能，这称为系统的一大瓶颈，严重制约了hadoop的扩展性。
2、可靠性差：MRv1采用master/slave结构，其中，master存在单点问题。
3、资源利用率低：MRv1采用了基于槽位的资源分配模型，这是一种粗粒度的资源划分单位，通常一个任务不会用完槽位对应的资源，且其他任务也无法使用这些空闲资源。
此外，Hadoop 将槽位分为Map Slot 和Reduce Slot 两种，且不允许它们之间共享，常常会导致一种槽位资源紧张而另外一种闲置
（比如一个作业刚刚提交时，只会运行Map Task，此时Reduce Slot 闲置）。
4、无法支持多种计算框架：随着互联网高速发展，MapReduce 这种基于磁盘的离线计算框架已经不能满足应用要求，从而出现了一些新的计算框架，
包括内存计算框架、流式计算框架和迭代式计算框架等，而MRv1 不能支持多种计算框架并存。

yarn基本架构：
yarn总体上仍然是master/slave架构，在整个资源管理框架中，ResourceManager为master，NodeManager为slave，ResourceManager负责对各个NodeManager上的资源进行统一管理
和调度。当用户提交一个应用程序时，需要提供一个用以跟踪和管理这个程序的ApplicationMaster，它负责向ResourceManager申请资源，并要求NodeManager启动可以占用一定资源
的任务。由于不同的ApplicationMaster被分布到不同的节点上，因此它们之间不会相互影响。
yarn主要由ResourceManger、NodeManager、ApplicationMaster和container等几个组件构成。
1、ResourceManager（RM）
RM是一个全局的资源管理器，负责整个系统的资源管理和分配。它主要由两个组件构成：调度器（scheduler）和应用程序管理器（Applications Manager，ASM）。
（1）调度器
调度器根据容量、队列等限制条件将系统中的资源分配给各个正在运行的应用程序。该调度器是一个纯粹的调度器，它不再从事任何与具体应用程序相关的工作，比如不负责监控或跟踪
应用的执行状态等，也不负责重新启动应用执行失败或硬件故障而产生的失败任务，这些均交由应用程序相关的ApplicationMaster完成。调度器仅根据各个应用程序的资源需求进行
资源分配，而资源分配单位用一个抽象概念“资源容器”（Resource Container，简称Container）表示，Container是一个动态资源分配单位，它将内存、CPU、磁盘、网络等资源封装
在一起，从而限定每个任务使用的资源量。
（2）应用程序管理器
应用程序管理器负责管理整个系统中所有应用程序，包括应用程序提交、与调度器协商资源以启动ApplicationMaster、监控ApplicationMaster运行状态并在失败时重新启动它等。
2、ApplicationMaster（AM）
用户提交的每个应用程序均包含一个AM，主要功能包括：
a、与RM调度器协商以获取资源（用Container表示）
b、将得到的任务进一步分配给内部的任务
c、与NM通信以启动/停止任务
d、监控所有任务的运行状态，并在任务运行失败时重新为任务申请资源以重启任务。
3、NodeManager（NM）
NM是每个节点上的资源和任务管理器，一方面，它会定时地向RM汇报本节点上的资源使用情况和各个Container的运行状态；另一方面，它接收并处理来自各AM的Container启动/停止
等各种请求。
4、Container
Container 是YARN 中的资源抽象， 它封装了某个节点上的多维度资源， 如内存、CPU、磁盘、网络等，当AM 向RM 申请资源时，RM 为AM 返回的资源便是用Container表示的。
YARN 会为每个任务分配一个Container，且该任务只能使用该Container 中描述的资源。需要注意的是，Container 不同于MRv1 中的slot，它是一个动态资源划分单位，
是根据应用程序的需求动态生成的

yarn通信协议：
RPC 协议是连接各个组件的“大动脉”，了解不同组件之间的RPC 协议有助于我们更深入地学习YARN 框架。在YARN 中，任何两个需相互通信的组件之间仅有一个RPC 协议，
而对于任何一个RPC 协议，通信双方有一端是Client，另一端为Server，且Client 总是主动连接Server 的，因此，YARN 实际上采用的是拉式（pull-based）通信模型。
YARN主要由以下几个RPC协议组成：
A、JobClient（作业提交客户端）与 RM之间的协议ApplicationClientProtocol：JobClient通过该RPC协议提交应用程序、查询应用程序状态等。
B、Admin（管理员）与 RM 之间的通信协议ResourceManagerAdministrationProtocol：Admin通过该RPC协议更新系统配置文件，比如节点黑白名单、用户队列权限等。
C、AM与 RM之间的协议ApplicationMasterProtocol ：AM通过该RPC协议向RM注册和撤销自己，并为各个任务申请资源。
D、AM与 NM之间的协议ContainerManagementProtocol ：AM通过该RPC要求NM启动或者停止Container，获取各个Container的使用状态等信息。
E、NM与 RM之间的协议ResourceTracker ：NM通过该 RPC协议向 RM注册，并定时发送心跳信息汇报当前节点的资源使用情况和Container 运行情况。

yarn工作流程：
当用户向yarn提交一个应用程序后，yarn将分两个阶段运行该应用程序：第一个阶段是启动ApplicationMaster；第二个阶段是由ApplicationMaster创建应用程序，
为它申请资源，并监控它的整个运行过程，直到运行完成。
yarn的工作流程分为以下几个步骤：
步骤1　用户向YARN中提交应用程序， 其中包括ApplicationMaster程序、启动ApplicationMaster的命令、用户程序等。
步骤2　ResourceManager为该应用程序分配第一个Container， 并与对应的NodeManager通信，要求它在这个Container中启动应用程序的ApplicationMaster。
步骤3　ApplicationMaster首先向ResourceManager注册， 这样用户可以直接通过ResourceManage查看应用程序的运行状态，然后它将为各个任务申请资源，并监控它的运
行状态，直到运行结束，即重复步骤4~7。
步骤4　ApplicationMaster采用轮询的方式通过RPC协议向ResourceManager申请和领取资源。
步骤5　一旦ApplicationMaster申请到资源后，便与对应的NodeManager通信，要求它启动任务。
步骤6　NodeManager为任务设置好运行环境（包括环境变量、JAR 包、二进制程序等）后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务。
步骤7　各个任务通过某个RPC协议向ApplicationMaster汇报自己的状态和进度，以让ApplicationMaster随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。
在应用程序运行过程中，用户可随时通过RPC向ApplicationMaster查询应用程序的当前运行状态。
步骤8　应用程序运行完成后，ApplicationMaster向ResourceManager注销并关闭自己。