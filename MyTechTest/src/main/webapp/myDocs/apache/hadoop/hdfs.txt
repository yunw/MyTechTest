HDFS(Hadoop Distributed File System):设计为运行在商业硬件上的分布式文件系统。它是高度容错的和被设计为部署在低成本硬件上。
假定与目标：
1、硬件故障：硬件故障是正常的而不是一种意外。一个hdfs实例包含了成百上千的服务器。每个都存储了文件系统数据的一部分。这个事实意味着有大量的组件并且每个组件都有
很大的故障可能，也就是说hdfs的某些组件经常是失效的。因此，快速的故障检查、恢复就成了hdfs的一个核心目标。
2、流数据访问：运行在hdfs上的应用需要流式访问他们的数据集。对用户来说，hdfs相对交互式操作来说，更多的是设计为批处理。相比低延迟，数据访问更注重高吞吐量。
3、大数据集：运行在hdfs上的应用有巨大的数据集。hdfs中的一个典型的文件有GB到TB的大小。
在一个集群中提供高聚合数据带宽和数百节点规模。一个单一集群中支持数百万的文件。
4、一致性模型：hdfs应用需要一个对文件一次写多次读的模型。文件一旦被创建，写，关闭不需要改变，除了追加和截断。追加内容到文件
结尾是支持的，但是不能在任意位置更新。这个假设简化了数据一致性问题，是数据的高吞吐量访问称为可能。一个mapreduce应用或一个网络
爬虫程序完全符合这个模型。
5、移动计算比移动数据廉价：一个应用程序所要求的计算在它所操作的数据附近执行更有效率。在数据集巨大的时候更明显。它最大限度的减少
了网络阻塞，提高系统的吞吐量。这个假设的意思是让计算更靠近数据比应用程序运行的时候移动数据更好。hdfs为应用提供的接口让应用更靠近数据所在地。
6、异构硬件和软件平台的可移植性：hdfs被设计为很容易的从一个平台移植到另一个。这有利于广泛采用HDFS作为一个大的应用平台的选择。

NameNode（名称节点）和DataNode（数据节点）：
hdfs拥有一个master/slave架构。一个hdfs集群包含一个单个名称节点，一个主服务（master server）来管理文件系统命名空间和控制客户端对文件的访问。此外，有多个
数据节点，通常，一个集群中的每个数据节点，管理着附属于这些节点的存储。hdfs暴露一个文件系统命名空间并且允许用户数据存储在文件中。在内部，一个文件被分割为一个
或多个块，这些块被存储在一组数据节点中。名称节点执行文件系统命名空间操作，象打开、关闭和重命名文件和路径。它也决定了块到数据节点的映射。数据节点响应来自文件
系统客户端的读写请求。数据节点也执行块创建、删除和从名称节点复制的指令。
名称节点和数据节点被设计为运行在商业机器上的软件。hdfs用java语言构建，任何支持java的机器都能运行名称节点和数据节点软件。一个典型的部署用一个专用的机器来运行
名称节点软件。集群中的其他的机器，每一个都运行一个数据节点软件的实例。
集群中单个名称节点的存在大大简化了系统的体系架构。名称节点是所有hdfs元数据的仲裁员和仓库。系统设计让用户的数据永不经过名称节点。

文件系统名称空间（file system namespace）：
hdfs支持传统的层次文件组织。用户或应用可以创建文件夹并将文件存储在这些文件夹中。文件系统的命名空间层次结构与大多数其他现有的文件系统相似；可以创建和删除文件，
将文件从一个文件夹移动到另一个。或者重命名一个文件。HDFS尚未实现用户配额和访问权限。hdfs不支持硬链接（hard link）或软链接（soft link）。
名称节点维护了文件系统命名空间。文件系统命名空间或它的属性的任何改变都被名称节点记录下来。应用可以指定一个文件的副本数量。
文件的拷贝数被称为该文件的复制因子。此信息由名称节点存储。

数据复制：
HDFS被设计为可靠地存储非常大的文件在机器在一各大的集群中。它将文件存储为一序列的块；所有的块的大小都相同，除了最后一块。文件的块都被复制为了故障容错。
每个文件的块大小和复制因子都是可配置的。应用可以指定文件的复制数量。复制因子可以在文件创建的时候指定，以后还可以改变。
名称节点对块的复制做所有的决定。它定期从集群中的数据节点接收心跳和块报告（blockreport）。每一个心跳的收据都表明该数据节点在正常工作。一个块报告包含了
这个数据节点上的所有块的列表。

文件系统元数据的持久化：
hdfs命名空间由名称节点存储。名称节点使用一个叫做editlog的事务日志来持续的记录文件系统元数据的每一个变化。例如，在hdfs中创建一个新的文件会导致名称节点插入
一条记录到editlog来记录这一点。同样的，改变一个文件的复制因子会导致一条新的记录被插入到editlog。名称节点使用本地主机操作系统的文件来存储editlog。全部文件
系统命名空间，包括块到文件的映射和文件系统的属性，都被存储在一个叫fsimage的文件中。fsimage作为一个文件也被存储在名称节点的本地文件系统中。
名称节点在内存中保持了一个全部文件系统命名空间、文件的块映射的镜像。这个关键的元数据条目被设计为紧凑的，象那样一个有4GB内存的名称节点足够支持一个独大数量
的文件和目录。当名称节点启动的时候，它从磁盘读取fsimage和editlog文件。从editlog中请求所有的事务到内存中作为fsimage的一个表示，
并且刷一个新的版本到磁盘上的fsimage文件中。然后就可以删除旧的editlog了，因为它的事务都持久化到fsimage中了。这个处理叫做一个检查点。
数据节点存储hdfs数据到本地文件系统大文件中。数据节点并不知道hdfs文件。它存储hdfs的每个块到本地文件系统的单独的文件中。数据节点不会将所有的文件都创建在一个
目录下。相反，它使用一个启发算法来计算每个目录下的最佳文件数量并创建适当的子目录。在同一个目录中创建所哟的本地文件不是最好的，因为本地文件系统可能不能很好
的支持数量巨大的文件在单一的目录中。当一个数据节点启动的时候，它扫描它的本地文件系统，生成一个包含所有hdfs数据块的列表，并把这个报告给名称节点：这就是
块报告。
